{
  "version": 3,
  "sources": ["../../../../../node_modules/@firebase/app-check/dist/esm/index.esm2017.js", "../../../../../node_modules/@angular/fire/fesm2022/angular-fire-app-check.mjs", "../../../../../node_modules/firebase/compat/app/dist/esm/index.esm.js", "../../../../../node_modules/@angular/fire/fesm2022/angular-fire-compat.mjs", "../../../../../node_modules/@angular/fire/fesm2022/angular-fire-compat-auth.mjs", "../../../../../node_modules/@firebase/firestore-compat/dist/index.esm2017.js", "../../../../../node_modules/@angular/fire/fesm2022/angular-fire-compat-firestore.mjs"],
  "sourcesContent": ["import { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { Deferred, ErrorFactory, isIndexedDBAvailable, uuidv4, getGlobal, base64, issuedAtTime, calculateBackoffMillis, getModularInstance } from '@firebase/util';\nimport { Logger } from '@firebase/logger';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst APP_CHECK_STATES = new Map();\r\nconst DEFAULT_STATE = {\r\n    activated: false,\r\n    tokenObservers: []\r\n};\r\nconst DEBUG_STATE = {\r\n    initialized: false,\r\n    enabled: false\r\n};\r\n/**\r\n * Gets a reference to the state object.\r\n */\r\nfunction getStateReference(app) {\r\n    return APP_CHECK_STATES.get(app) || Object.assign({}, DEFAULT_STATE);\r\n}\r\n/**\r\n * Set once on initialization. The map should hold the same reference to the\r\n * same object until this entry is deleted.\r\n */\r\nfunction setInitialState(app, state) {\r\n    APP_CHECK_STATES.set(app, state);\r\n    return APP_CHECK_STATES.get(app);\r\n}\r\nfunction getDebugState() {\r\n    return DEBUG_STATE;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst BASE_ENDPOINT = 'https://content-firebaseappcheck.googleapis.com/v1';\r\nconst EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaV3Token';\r\nconst EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD = 'exchangeRecaptchaEnterpriseToken';\r\nconst EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\r\nconst TOKEN_REFRESH_TIME = {\r\n    /**\r\n     * The offset time before token natural expiration to run the refresh.\r\n     * This is currently 5 minutes.\r\n     */\r\n    OFFSET_DURATION: 5 * 60 * 1000,\r\n    /**\r\n     * This is the first retrial wait after an error. This is currently\r\n     * 30 seconds.\r\n     */\r\n    RETRIAL_MIN_WAIT: 30 * 1000,\r\n    /**\r\n     * This is the maximum retrial wait, currently 16 minutes.\r\n     */\r\n    RETRIAL_MAX_WAIT: 16 * 60 * 1000\r\n};\r\n/**\r\n * One day in millis, for certain error code backoffs.\r\n */\r\nconst ONE_DAY = 24 * 60 * 60 * 1000;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Port from auth proactiverefresh.js\r\n *\r\n */\r\n// TODO: move it to @firebase/util?\r\n// TODO: allow to config whether refresh should happen in the background\r\nclass Refresher {\r\n    constructor(operation, retryPolicy, getWaitDuration, lowerBound, upperBound) {\r\n        this.operation = operation;\r\n        this.retryPolicy = retryPolicy;\r\n        this.getWaitDuration = getWaitDuration;\r\n        this.lowerBound = lowerBound;\r\n        this.upperBound = upperBound;\r\n        this.pending = null;\r\n        this.nextErrorWaitInterval = lowerBound;\r\n        if (lowerBound > upperBound) {\r\n            throw new Error('Proactive refresh lower bound greater than upper bound!');\r\n        }\r\n    }\r\n    start() {\r\n        this.nextErrorWaitInterval = this.lowerBound;\r\n        this.process(true).catch(() => {\r\n            /* we don't care about the result */\r\n        });\r\n    }\r\n    stop() {\r\n        if (this.pending) {\r\n            this.pending.reject('cancelled');\r\n            this.pending = null;\r\n        }\r\n    }\r\n    isRunning() {\r\n        return !!this.pending;\r\n    }\r\n    async process(hasSucceeded) {\r\n        this.stop();\r\n        try {\r\n            this.pending = new Deferred();\r\n            this.pending.promise.catch(_e => {\r\n                /* ignore */\r\n            });\r\n            await sleep(this.getNextRun(hasSucceeded));\r\n            // Why do we resolve a promise, then immediate wait for it?\r\n            // We do it to make the promise chain cancellable.\r\n            // We can call stop() which rejects the promise before the following line execute, which makes\r\n            // the code jump to the catch block.\r\n            // TODO: unit test this\r\n            this.pending.resolve();\r\n            await this.pending.promise;\r\n            this.pending = new Deferred();\r\n            this.pending.promise.catch(_e => {\r\n                /* ignore */\r\n            });\r\n            await this.operation();\r\n            this.pending.resolve();\r\n            await this.pending.promise;\r\n            this.process(true).catch(() => {\r\n                /* we don't care about the result */\r\n            });\r\n        }\r\n        catch (error) {\r\n            if (this.retryPolicy(error)) {\r\n                this.process(false).catch(() => {\r\n                    /* we don't care about the result */\r\n                });\r\n            }\r\n            else {\r\n                this.stop();\r\n            }\r\n        }\r\n    }\r\n    getNextRun(hasSucceeded) {\r\n        if (hasSucceeded) {\r\n            // If last operation succeeded, reset next error wait interval and return\r\n            // the default wait duration.\r\n            this.nextErrorWaitInterval = this.lowerBound;\r\n            // Return typical wait duration interval after a successful operation.\r\n            return this.getWaitDuration();\r\n        }\r\n        else {\r\n            // Get next error wait interval.\r\n            const currentErrorWaitInterval = this.nextErrorWaitInterval;\r\n            // Double interval for next consecutive error.\r\n            this.nextErrorWaitInterval *= 2;\r\n            // Make sure next wait interval does not exceed the maximum upper bound.\r\n            if (this.nextErrorWaitInterval > this.upperBound) {\r\n                this.nextErrorWaitInterval = this.upperBound;\r\n            }\r\n            return currentErrorWaitInterval;\r\n        }\r\n    }\r\n}\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, ms);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"already-initialized\" /* AppCheckError.ALREADY_INITIALIZED */]: 'You have already called initializeAppCheck() for FirebaseApp {$appName} with ' +\r\n        'different options. To avoid this error, call initializeAppCheck() with the ' +\r\n        'same options as when it was originally called. This will return the ' +\r\n        'already initialized instance.',\r\n    [\"use-before-activation\" /* AppCheckError.USE_BEFORE_ACTIVATION */]: 'App Check is being used before initializeAppCheck() is called for FirebaseApp {$appName}. ' +\r\n        'Call initializeAppCheck() before instantiating other Firebase services.',\r\n    [\"fetch-network-error\" /* AppCheckError.FETCH_NETWORK_ERROR */]: 'Fetch failed to connect to a network. Check Internet connection. ' +\r\n        'Original error: {$originalErrorMessage}.',\r\n    [\"fetch-parse-error\" /* AppCheckError.FETCH_PARSE_ERROR */]: 'Fetch client could not parse response.' +\r\n        ' Original error: {$originalErrorMessage}.',\r\n    [\"fetch-status-error\" /* AppCheckError.FETCH_STATUS_ERROR */]: 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\r\n    [\"storage-open\" /* AppCheckError.STORAGE_OPEN */]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-get\" /* AppCheckError.STORAGE_GET */]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-set\" /* AppCheckError.STORAGE_WRITE */]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\r\n    [\"recaptcha-error\" /* AppCheckError.RECAPTCHA_ERROR */]: 'ReCAPTCHA error.',\r\n    [\"throttled\" /* AppCheckError.THROTTLED */]: `Requests throttled due to {$httpStatus} error. Attempts allowed again after {$time}`\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('appCheck', 'AppCheck', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getRecaptcha(isEnterprise = false) {\r\n    var _a;\r\n    if (isEnterprise) {\r\n        return (_a = self.grecaptcha) === null || _a === void 0 ? void 0 : _a.enterprise;\r\n    }\r\n    return self.grecaptcha;\r\n}\r\nfunction ensureActivated(app) {\r\n    if (!getStateReference(app).activated) {\r\n        throw ERROR_FACTORY.create(\"use-before-activation\" /* AppCheckError.USE_BEFORE_ACTIVATION */, {\r\n            appName: app.name\r\n        });\r\n    }\r\n}\r\nfunction getDurationString(durationInMillis) {\r\n    const totalSeconds = Math.round(durationInMillis / 1000);\r\n    const days = Math.floor(totalSeconds / (3600 * 24));\r\n    const hours = Math.floor((totalSeconds - days * 3600 * 24) / 3600);\r\n    const minutes = Math.floor((totalSeconds - days * 3600 * 24 - hours * 3600) / 60);\r\n    const seconds = totalSeconds - days * 3600 * 24 - hours * 3600 - minutes * 60;\r\n    let result = '';\r\n    if (days) {\r\n        result += pad(days) + 'd:';\r\n    }\r\n    if (hours) {\r\n        result += pad(hours) + 'h:';\r\n    }\r\n    result += pad(minutes) + 'm:' + pad(seconds) + 's';\r\n    return result;\r\n}\r\nfunction pad(value) {\r\n    if (value === 0) {\r\n        return '00';\r\n    }\r\n    return value >= 10 ? value.toString() : '0' + value;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function exchangeToken({ url, body }, heartbeatServiceProvider) {\r\n    const headers = {\r\n        'Content-Type': 'application/json'\r\n    };\r\n    // If heartbeat service exists, add heartbeat header string to the header.\r\n    const heartbeatService = heartbeatServiceProvider.getImmediate({\r\n        optional: true\r\n    });\r\n    if (heartbeatService) {\r\n        const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\r\n        if (heartbeatsHeader) {\r\n            headers['X-Firebase-Client'] = heartbeatsHeader;\r\n        }\r\n    }\r\n    const options = {\r\n        method: 'POST',\r\n        body: JSON.stringify(body),\r\n        headers\r\n    };\r\n    let response;\r\n    try {\r\n        response = await fetch(url, options);\r\n    }\r\n    catch (originalError) {\r\n        throw ERROR_FACTORY.create(\"fetch-network-error\" /* AppCheckError.FETCH_NETWORK_ERROR */, {\r\n            originalErrorMessage: originalError === null || originalError === void 0 ? void 0 : originalError.message\r\n        });\r\n    }\r\n    if (response.status !== 200) {\r\n        throw ERROR_FACTORY.create(\"fetch-status-error\" /* AppCheckError.FETCH_STATUS_ERROR */, {\r\n            httpStatus: response.status\r\n        });\r\n    }\r\n    let responseBody;\r\n    try {\r\n        // JSON parsing throws SyntaxError if the response body isn't a JSON string.\r\n        responseBody = await response.json();\r\n    }\r\n    catch (originalError) {\r\n        throw ERROR_FACTORY.create(\"fetch-parse-error\" /* AppCheckError.FETCH_PARSE_ERROR */, {\r\n            originalErrorMessage: originalError === null || originalError === void 0 ? void 0 : originalError.message\r\n        });\r\n    }\r\n    // Protobuf duration format.\r\n    // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration\r\n    const match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\r\n    if (!match || !match[2] || isNaN(Number(match[1]))) {\r\n        throw ERROR_FACTORY.create(\"fetch-parse-error\" /* AppCheckError.FETCH_PARSE_ERROR */, {\r\n            originalErrorMessage: `ttl field (timeToLive) is not in standard Protobuf Duration ` +\r\n                `format: ${responseBody.ttl}`\r\n        });\r\n    }\r\n    const timeToLiveAsNumber = Number(match[1]) * 1000;\r\n    const now = Date.now();\r\n    return {\r\n        token: responseBody.token,\r\n        expireTimeMillis: now + timeToLiveAsNumber,\r\n        issuedAtTimeMillis: now\r\n    };\r\n}\r\nfunction getExchangeRecaptchaV3TokenRequest(app, reCAPTCHAToken) {\r\n    const { projectId, appId, apiKey } = app.options;\r\n    return {\r\n        url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_TOKEN_METHOD}?key=${apiKey}`,\r\n        body: {\r\n            'recaptcha_v3_token': reCAPTCHAToken\r\n        }\r\n    };\r\n}\r\nfunction getExchangeRecaptchaEnterpriseTokenRequest(app, reCAPTCHAToken) {\r\n    const { projectId, appId, apiKey } = app.options;\r\n    return {\r\n        url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD}?key=${apiKey}`,\r\n        body: {\r\n            'recaptcha_enterprise_token': reCAPTCHAToken\r\n        }\r\n    };\r\n}\r\nfunction getExchangeDebugTokenRequest(app, debugToken) {\r\n    const { projectId, appId, apiKey } = app.options;\r\n    return {\r\n        url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_DEBUG_TOKEN_METHOD}?key=${apiKey}`,\r\n        body: {\r\n            // eslint-disable-next-line\r\n            debug_token: debugToken\r\n        }\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DB_NAME = 'firebase-app-check-database';\r\nconst DB_VERSION = 1;\r\nconst STORE_NAME = 'firebase-app-check-store';\r\nconst DEBUG_TOKEN_KEY = 'debug-token';\r\nlet dbPromise = null;\r\nfunction getDBPromise() {\r\n    if (dbPromise) {\r\n        return dbPromise;\r\n    }\r\n    dbPromise = new Promise((resolve, reject) => {\r\n        try {\r\n            const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n            request.onsuccess = event => {\r\n                resolve(event.target.result);\r\n            };\r\n            request.onerror = event => {\r\n                var _a;\r\n                reject(ERROR_FACTORY.create(\"storage-open\" /* AppCheckError.STORAGE_OPEN */, {\r\n                    originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\r\n                }));\r\n            };\r\n            request.onupgradeneeded = event => {\r\n                const db = event.target.result;\r\n                // We don't use 'break' in this switch statement, the fall-through\r\n                // behavior is what we want, because if there are multiple versions between\r\n                // the old version and the current version, we want ALL the migrations\r\n                // that correspond to those versions to run, not only the last one.\r\n                // eslint-disable-next-line default-case\r\n                switch (event.oldVersion) {\r\n                    case 0:\r\n                        db.createObjectStore(STORE_NAME, {\r\n                            keyPath: 'compositeKey'\r\n                        });\r\n                }\r\n            };\r\n        }\r\n        catch (e) {\r\n            reject(ERROR_FACTORY.create(\"storage-open\" /* AppCheckError.STORAGE_OPEN */, {\r\n                originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\r\n            }));\r\n        }\r\n    });\r\n    return dbPromise;\r\n}\r\nfunction readTokenFromIndexedDB(app) {\r\n    return read(computeKey(app));\r\n}\r\nfunction writeTokenToIndexedDB(app, token) {\r\n    return write(computeKey(app), token);\r\n}\r\nfunction writeDebugTokenToIndexedDB(token) {\r\n    return write(DEBUG_TOKEN_KEY, token);\r\n}\r\nfunction readDebugTokenFromIndexedDB() {\r\n    return read(DEBUG_TOKEN_KEY);\r\n}\r\nasync function write(key, value) {\r\n    const db = await getDBPromise();\r\n    const transaction = db.transaction(STORE_NAME, 'readwrite');\r\n    const store = transaction.objectStore(STORE_NAME);\r\n    const request = store.put({\r\n        compositeKey: key,\r\n        value\r\n    });\r\n    return new Promise((resolve, reject) => {\r\n        request.onsuccess = _event => {\r\n            resolve();\r\n        };\r\n        transaction.onerror = event => {\r\n            var _a;\r\n            reject(ERROR_FACTORY.create(\"storage-set\" /* AppCheckError.STORAGE_WRITE */, {\r\n                originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\r\n            }));\r\n        };\r\n    });\r\n}\r\nasync function read(key) {\r\n    const db = await getDBPromise();\r\n    const transaction = db.transaction(STORE_NAME, 'readonly');\r\n    const store = transaction.objectStore(STORE_NAME);\r\n    const request = store.get(key);\r\n    return new Promise((resolve, reject) => {\r\n        request.onsuccess = event => {\r\n            const result = event.target.result;\r\n            if (result) {\r\n                resolve(result.value);\r\n            }\r\n            else {\r\n                resolve(undefined);\r\n            }\r\n        };\r\n        transaction.onerror = event => {\r\n            var _a;\r\n            reject(ERROR_FACTORY.create(\"storage-get\" /* AppCheckError.STORAGE_GET */, {\r\n                originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\r\n            }));\r\n        };\r\n    });\r\n}\r\nfunction computeKey(app) {\r\n    return `${app.options.appId}-${app.name}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/app-check');\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\r\n */\r\nasync function readTokenFromStorage(app) {\r\n    if (isIndexedDBAvailable()) {\r\n        let token = undefined;\r\n        try {\r\n            token = await readTokenFromIndexedDB(app);\r\n        }\r\n        catch (e) {\r\n            // swallow the error and return undefined\r\n            logger.warn(`Failed to read token from IndexedDB. Error: ${e}`);\r\n        }\r\n        return token;\r\n    }\r\n    return undefined;\r\n}\r\n/**\r\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\r\n */\r\nfunction writeTokenToStorage(app, token) {\r\n    if (isIndexedDBAvailable()) {\r\n        return writeTokenToIndexedDB(app, token).catch(e => {\r\n            // swallow the error and resolve the promise\r\n            logger.warn(`Failed to write token to IndexedDB. Error: ${e}`);\r\n        });\r\n    }\r\n    return Promise.resolve();\r\n}\r\nasync function readOrCreateDebugTokenFromStorage() {\r\n    /**\r\n     * Theoretically race condition can happen if we read, then write in 2 separate transactions.\r\n     * But it won't happen here, because this function will be called exactly once.\r\n     */\r\n    let existingDebugToken = undefined;\r\n    try {\r\n        existingDebugToken = await readDebugTokenFromIndexedDB();\r\n    }\r\n    catch (_e) {\r\n        // failed to read from indexeddb. We assume there is no existing debug token, and generate a new one.\r\n    }\r\n    if (!existingDebugToken) {\r\n        // create a new debug token\r\n        const newToken = uuidv4();\r\n        // We don't need to block on writing to indexeddb\r\n        // In case persistence failed, a new debug token will be generated every time the page is refreshed.\r\n        // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\r\n        // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\r\n        // You should switch to a different browser that supports indexeddb\r\n        writeDebugTokenToIndexedDB(newToken).catch(e => logger.warn(`Failed to persist debug token to IndexedDB. Error: ${e}`));\r\n        return newToken;\r\n    }\r\n    else {\r\n        return existingDebugToken;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isDebugMode() {\r\n    const debugState = getDebugState();\r\n    return debugState.enabled;\r\n}\r\nasync function getDebugToken() {\r\n    const state = getDebugState();\r\n    if (state.enabled && state.token) {\r\n        return state.token.promise;\r\n    }\r\n    else {\r\n        // should not happen!\r\n        throw Error(`\n            Can't get debug token in production mode.\n        `);\r\n    }\r\n}\r\nfunction initializeDebugMode() {\r\n    const globals = getGlobal();\r\n    const debugState = getDebugState();\r\n    // Set to true if this function has been called, whether or not\r\n    // it enabled debug mode.\r\n    debugState.initialized = true;\r\n    if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' &&\r\n        globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true) {\r\n        return;\r\n    }\r\n    debugState.enabled = true;\r\n    const deferredToken = new Deferred();\r\n    debugState.token = deferredToken;\r\n    if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\r\n        deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\r\n    }\r\n    else {\r\n        deferredToken.resolve(readOrCreateDebugTokenFromStorage());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Initial hardcoded value agreed upon across platforms for initial launch.\r\n// Format left open for possible dynamic error values and other fields in the future.\r\nconst defaultTokenErrorData = { error: 'UNKNOWN_ERROR' };\r\n/**\r\n * Stringify and base64 encode token error data.\r\n *\r\n * @param tokenError Error data, currently hardcoded.\r\n */\r\nfunction formatDummyToken(tokenErrorData) {\r\n    return base64.encodeString(JSON.stringify(tokenErrorData), \r\n    /* webSafe= */ false);\r\n}\r\n/**\r\n * This function always resolves.\r\n * The result will contain an error field if there is any error.\r\n * In case there is an error, the token field in the result will be populated with a dummy value\r\n */\r\nasync function getToken$2(appCheck, forceRefresh = false) {\r\n    const app = appCheck.app;\r\n    ensureActivated(app);\r\n    const state = getStateReference(app);\r\n    /**\r\n     * First check if there is a token in memory from a previous `getToken()` call.\r\n     */\r\n    let token = state.token;\r\n    let error = undefined;\r\n    /**\r\n     * If an invalid token was found in memory, clear token from\r\n     * memory and unset the local variable `token`.\r\n     */\r\n    if (token && !isValid(token)) {\r\n        state.token = undefined;\r\n        token = undefined;\r\n    }\r\n    /**\r\n     * If there is no valid token in memory, try to load token from indexedDB.\r\n     */\r\n    if (!token) {\r\n        // cachedTokenPromise contains the token found in IndexedDB or undefined if not found.\r\n        const cachedToken = await state.cachedTokenPromise;\r\n        if (cachedToken) {\r\n            if (isValid(cachedToken)) {\r\n                token = cachedToken;\r\n            }\r\n            else {\r\n                // If there was an invalid token in the indexedDB cache, clear it.\r\n                await writeTokenToStorage(app, undefined);\r\n            }\r\n        }\r\n    }\r\n    // Return the cached token (from either memory or indexedDB) if it's valid\r\n    if (!forceRefresh && token && isValid(token)) {\r\n        return {\r\n            token: token.token\r\n        };\r\n    }\r\n    // Only set to true if this `getToken()` call is making the actual\r\n    // REST call to the exchange endpoint, versus waiting for an already\r\n    // in-flight call (see debug and regular exchange endpoint paths below)\r\n    let shouldCallListeners = false;\r\n    /**\r\n     * DEBUG MODE\r\n     * If debug mode is set, and there is no cached token, fetch a new App\r\n     * Check token using the debug token, and return it directly.\r\n     */\r\n    if (isDebugMode()) {\r\n        // Avoid making another call to the exchange endpoint if one is in flight.\r\n        if (!state.exchangeTokenPromise) {\r\n            state.exchangeTokenPromise = exchangeToken(getExchangeDebugTokenRequest(app, await getDebugToken()), appCheck.heartbeatServiceProvider).finally(() => {\r\n                // Clear promise when settled - either resolved or rejected.\r\n                state.exchangeTokenPromise = undefined;\r\n            });\r\n            shouldCallListeners = true;\r\n        }\r\n        const tokenFromDebugExchange = await state.exchangeTokenPromise;\r\n        // Write debug token to indexedDB.\r\n        await writeTokenToStorage(app, tokenFromDebugExchange);\r\n        // Write debug token to state.\r\n        state.token = tokenFromDebugExchange;\r\n        return { token: tokenFromDebugExchange.token };\r\n    }\r\n    /**\r\n     * There are no valid tokens in memory or indexedDB and we are not in\r\n     * debug mode.\r\n     * Request a new token from the exchange endpoint.\r\n     */\r\n    try {\r\n        // Avoid making another call to the exchange endpoint if one is in flight.\r\n        if (!state.exchangeTokenPromise) {\r\n            // state.provider is populated in initializeAppCheck()\r\n            // ensureActivated() at the top of this function checks that\r\n            // initializeAppCheck() has been called.\r\n            state.exchangeTokenPromise = state.provider.getToken().finally(() => {\r\n                // Clear promise when settled - either resolved or rejected.\r\n                state.exchangeTokenPromise = undefined;\r\n            });\r\n            shouldCallListeners = true;\r\n        }\r\n        token = await getStateReference(app).exchangeTokenPromise;\r\n    }\r\n    catch (e) {\r\n        if (e.code === `appCheck/${\"throttled\" /* AppCheckError.THROTTLED */}`) {\r\n            // Warn if throttled, but do not treat it as an error.\r\n            logger.warn(e.message);\r\n        }\r\n        else {\r\n            // `getToken()` should never throw, but logging error text to console will aid debugging.\r\n            logger.error(e);\r\n        }\r\n        // Always save error to be added to dummy token.\r\n        error = e;\r\n    }\r\n    let interopTokenResult;\r\n    if (!token) {\r\n        // If token is undefined, there must be an error.\r\n        // Return a dummy token along with the error.\r\n        interopTokenResult = makeDummyTokenResult(error);\r\n    }\r\n    else if (error) {\r\n        if (isValid(token)) {\r\n            // It's also possible a valid token exists, but there's also an error.\r\n            // (Such as if the token is almost expired, tries to refresh, and\r\n            // the exchange request fails.)\r\n            // We add a special error property here so that the refresher will\r\n            // count this as a failed attempt and use the backoff instead of\r\n            // retrying repeatedly with no delay, but any 3P listeners will not\r\n            // be hindered in getting the still-valid token.\r\n            interopTokenResult = {\r\n                token: token.token,\r\n                internalError: error\r\n            };\r\n        }\r\n        else {\r\n            // No invalid tokens should make it to this step. Memory and cached tokens\r\n            // are checked. Other tokens are from fresh exchanges. But just in case.\r\n            interopTokenResult = makeDummyTokenResult(error);\r\n        }\r\n    }\r\n    else {\r\n        interopTokenResult = {\r\n            token: token.token\r\n        };\r\n        // write the new token to the memory state as well as the persistent storage.\r\n        // Only do it if we got a valid new token\r\n        state.token = token;\r\n        await writeTokenToStorage(app, token);\r\n    }\r\n    if (shouldCallListeners) {\r\n        notifyTokenListeners(app, interopTokenResult);\r\n    }\r\n    return interopTokenResult;\r\n}\r\n/**\r\n * Internal API for limited use tokens. Skips all FAC state and simply calls\r\n * the underlying provider.\r\n */\r\nasync function getLimitedUseToken$1(appCheck) {\r\n    const app = appCheck.app;\r\n    ensureActivated(app);\r\n    const { provider } = getStateReference(app);\r\n    if (isDebugMode()) {\r\n        const debugToken = await getDebugToken();\r\n        const { token } = await exchangeToken(getExchangeDebugTokenRequest(app, debugToken), appCheck.heartbeatServiceProvider);\r\n        return { token };\r\n    }\r\n    else {\r\n        // provider is definitely valid since we ensure AppCheck was activated\r\n        const { token } = await provider.getToken();\r\n        return { token };\r\n    }\r\n}\r\nfunction addTokenListener(appCheck, type, listener, onError) {\r\n    const { app } = appCheck;\r\n    const state = getStateReference(app);\r\n    const tokenObserver = {\r\n        next: listener,\r\n        error: onError,\r\n        type\r\n    };\r\n    state.tokenObservers = [...state.tokenObservers, tokenObserver];\r\n    // Invoke the listener async immediately if there is a valid token\r\n    // in memory.\r\n    if (state.token && isValid(state.token)) {\r\n        const validToken = state.token;\r\n        Promise.resolve()\r\n            .then(() => {\r\n            listener({ token: validToken.token });\r\n            initTokenRefresher(appCheck);\r\n        })\r\n            .catch(() => {\r\n            /* we don't care about exceptions thrown in listeners */\r\n        });\r\n    }\r\n    /**\r\n     * Wait for any cached token promise to resolve before starting the token\r\n     * refresher. The refresher checks to see if there is an existing token\r\n     * in state and calls the exchange endpoint if not. We should first let the\r\n     * IndexedDB check have a chance to populate state if it can.\r\n     *\r\n     * Listener call isn't needed here because cachedTokenPromise will call any\r\n     * listeners that exist when it resolves.\r\n     */\r\n    // state.cachedTokenPromise is always populated in `activate()`.\r\n    void state.cachedTokenPromise.then(() => initTokenRefresher(appCheck));\r\n}\r\nfunction removeTokenListener(app, listener) {\r\n    const state = getStateReference(app);\r\n    const newObservers = state.tokenObservers.filter(tokenObserver => tokenObserver.next !== listener);\r\n    if (newObservers.length === 0 &&\r\n        state.tokenRefresher &&\r\n        state.tokenRefresher.isRunning()) {\r\n        state.tokenRefresher.stop();\r\n    }\r\n    state.tokenObservers = newObservers;\r\n}\r\n/**\r\n * Logic to create and start refresher as needed.\r\n */\r\nfunction initTokenRefresher(appCheck) {\r\n    const { app } = appCheck;\r\n    const state = getStateReference(app);\r\n    // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\r\n    // is not true.\r\n    let refresher = state.tokenRefresher;\r\n    if (!refresher) {\r\n        refresher = createTokenRefresher(appCheck);\r\n        state.tokenRefresher = refresher;\r\n    }\r\n    if (!refresher.isRunning() && state.isTokenAutoRefreshEnabled) {\r\n        refresher.start();\r\n    }\r\n}\r\nfunction createTokenRefresher(appCheck) {\r\n    const { app } = appCheck;\r\n    return new Refresher(\r\n    // Keep in mind when this fails for any reason other than the ones\r\n    // for which we should retry, it will effectively stop the proactive refresh.\r\n    async () => {\r\n        const state = getStateReference(app);\r\n        // If there is no token, we will try to load it from storage and use it\r\n        // If there is a token, we force refresh it because we know it's going to expire soon\r\n        let result;\r\n        if (!state.token) {\r\n            result = await getToken$2(appCheck);\r\n        }\r\n        else {\r\n            result = await getToken$2(appCheck, true);\r\n        }\r\n        /**\r\n         * getToken() always resolves. In case the result has an error field defined, it means\r\n         * the operation failed, and we should retry.\r\n         */\r\n        if (result.error) {\r\n            throw result.error;\r\n        }\r\n        /**\r\n         * A special `internalError` field reflects that there was an error\r\n         * getting a new token from the exchange endpoint, but there's still a\r\n         * previous token that's valid for now and this should be passed to 2P/3P\r\n         * requests for a token. But we want this callback (`this.operation` in\r\n         * `Refresher`) to throw in order to kick off the Refresher's retry\r\n         * backoff. (Setting `hasSucceeded` to false.)\r\n         */\r\n        if (result.internalError) {\r\n            throw result.internalError;\r\n        }\r\n    }, () => {\r\n        return true;\r\n    }, () => {\r\n        const state = getStateReference(app);\r\n        if (state.token) {\r\n            // issuedAtTime + (50% * total TTL) + 5 minutes\r\n            let nextRefreshTimeMillis = state.token.issuedAtTimeMillis +\r\n                (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) *\r\n                    0.5 +\r\n                5 * 60 * 1000;\r\n            // Do not allow refresh time to be past (expireTime - 5 minutes)\r\n            const latestAllowableRefresh = state.token.expireTimeMillis - 5 * 60 * 1000;\r\n            nextRefreshTimeMillis = Math.min(nextRefreshTimeMillis, latestAllowableRefresh);\r\n            return Math.max(0, nextRefreshTimeMillis - Date.now());\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }, TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT, TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT);\r\n}\r\nfunction notifyTokenListeners(app, token) {\r\n    const observers = getStateReference(app).tokenObservers;\r\n    for (const observer of observers) {\r\n        try {\r\n            if (observer.type === \"EXTERNAL\" /* ListenerType.EXTERNAL */ && token.error != null) {\r\n                // If this listener was added by a 3P call, send any token error to\r\n                // the supplied error handler. A 3P observer always has an error\r\n                // handler.\r\n                observer.error(token.error);\r\n            }\r\n            else {\r\n                // If the token has no error field, always return the token.\r\n                // If this is a 2P listener, return the token, whether or not it\r\n                // has an error field.\r\n                observer.next(token);\r\n            }\r\n        }\r\n        catch (e) {\r\n            // Errors in the listener function itself are always ignored.\r\n        }\r\n    }\r\n}\r\nfunction isValid(token) {\r\n    return token.expireTimeMillis - Date.now() > 0;\r\n}\r\nfunction makeDummyTokenResult(error) {\r\n    return {\r\n        token: formatDummyToken(defaultTokenErrorData),\r\n        error\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * AppCheck Service class.\r\n */\r\nclass AppCheckService {\r\n    constructor(app, heartbeatServiceProvider) {\r\n        this.app = app;\r\n        this.heartbeatServiceProvider = heartbeatServiceProvider;\r\n    }\r\n    _delete() {\r\n        const { tokenObservers } = getStateReference(this.app);\r\n        for (const tokenObserver of tokenObservers) {\r\n            removeTokenListener(this.app, tokenObserver.next);\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n}\r\nfunction factory(app, heartbeatServiceProvider) {\r\n    return new AppCheckService(app, heartbeatServiceProvider);\r\n}\r\nfunction internalFactory(appCheck) {\r\n    return {\r\n        getToken: forceRefresh => getToken$2(appCheck, forceRefresh),\r\n        getLimitedUseToken: () => getLimitedUseToken$1(appCheck),\r\n        addTokenListener: listener => addTokenListener(appCheck, \"INTERNAL\" /* ListenerType.INTERNAL */, listener),\r\n        removeTokenListener: listener => removeTokenListener(appCheck.app, listener)\r\n    };\r\n}\n\nconst name = \"@firebase/app-check\";\nconst version = \"0.8.8\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\r\nconst RECAPTCHA_ENTERPRISE_URL = 'https://www.google.com/recaptcha/enterprise.js';\r\nfunction initializeV3(app, siteKey) {\r\n    const initialized = new Deferred();\r\n    const state = getStateReference(app);\r\n    state.reCAPTCHAState = { initialized };\r\n    const divId = makeDiv(app);\r\n    const grecaptcha = getRecaptcha(false);\r\n    if (!grecaptcha) {\r\n        loadReCAPTCHAV3Script(() => {\r\n            const grecaptcha = getRecaptcha(false);\r\n            if (!grecaptcha) {\r\n                // it shouldn't happen.\r\n                throw new Error('no recaptcha');\r\n            }\r\n            queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\r\n        });\r\n    }\r\n    else {\r\n        queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\r\n    }\r\n    return initialized.promise;\r\n}\r\nfunction initializeEnterprise(app, siteKey) {\r\n    const initialized = new Deferred();\r\n    const state = getStateReference(app);\r\n    state.reCAPTCHAState = { initialized };\r\n    const divId = makeDiv(app);\r\n    const grecaptcha = getRecaptcha(true);\r\n    if (!grecaptcha) {\r\n        loadReCAPTCHAEnterpriseScript(() => {\r\n            const grecaptcha = getRecaptcha(true);\r\n            if (!grecaptcha) {\r\n                // it shouldn't happen.\r\n                throw new Error('no recaptcha');\r\n            }\r\n            queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\r\n        });\r\n    }\r\n    else {\r\n        queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\r\n    }\r\n    return initialized.promise;\r\n}\r\n/**\r\n * Add listener to render the widget and resolve the promise when\r\n * the grecaptcha.ready() event fires.\r\n */\r\nfunction queueWidgetRender(app, siteKey, grecaptcha, container, initialized) {\r\n    grecaptcha.ready(() => {\r\n        // Invisible widgets allow us to set a different siteKey for each widget,\r\n        // so we use them to support multiple apps\r\n        renderInvisibleWidget(app, siteKey, grecaptcha, container);\r\n        initialized.resolve(grecaptcha);\r\n    });\r\n}\r\n/**\r\n * Add invisible div to page.\r\n */\r\nfunction makeDiv(app) {\r\n    const divId = `fire_app_check_${app.name}`;\r\n    const invisibleDiv = document.createElement('div');\r\n    invisibleDiv.id = divId;\r\n    invisibleDiv.style.display = 'none';\r\n    document.body.appendChild(invisibleDiv);\r\n    return divId;\r\n}\r\nasync function getToken$1(app) {\r\n    ensureActivated(app);\r\n    // ensureActivated() guarantees that reCAPTCHAState is set\r\n    const reCAPTCHAState = getStateReference(app).reCAPTCHAState;\r\n    const recaptcha = await reCAPTCHAState.initialized.promise;\r\n    return new Promise((resolve, _reject) => {\r\n        // Updated after initialization is complete.\r\n        const reCAPTCHAState = getStateReference(app).reCAPTCHAState;\r\n        recaptcha.ready(() => {\r\n            resolve(\r\n            // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\r\n            recaptcha.execute(reCAPTCHAState.widgetId, {\r\n                action: 'fire_app_check'\r\n            }));\r\n        });\r\n    });\r\n}\r\n/**\r\n *\r\n * @param app\r\n * @param container - Id of a HTML element.\r\n */\r\nfunction renderInvisibleWidget(app, siteKey, grecaptcha, container) {\r\n    const widgetId = grecaptcha.render(container, {\r\n        sitekey: siteKey,\r\n        size: 'invisible',\r\n        // Success callback - set state\r\n        callback: () => {\r\n            getStateReference(app).reCAPTCHAState.succeeded = true;\r\n        },\r\n        // Failure callback - set state\r\n        'error-callback': () => {\r\n            getStateReference(app).reCAPTCHAState.succeeded = false;\r\n        }\r\n    });\r\n    const state = getStateReference(app);\r\n    state.reCAPTCHAState = Object.assign(Object.assign({}, state.reCAPTCHAState), { // state.reCAPTCHAState is set in the initialize()\r\n        widgetId });\r\n}\r\nfunction loadReCAPTCHAV3Script(onload) {\r\n    const script = document.createElement('script');\r\n    script.src = RECAPTCHA_URL;\r\n    script.onload = onload;\r\n    document.head.appendChild(script);\r\n}\r\nfunction loadReCAPTCHAEnterpriseScript(onload) {\r\n    const script = document.createElement('script');\r\n    script.src = RECAPTCHA_ENTERPRISE_URL;\r\n    script.onload = onload;\r\n    document.head.appendChild(script);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\r\n * for an App Check token.\r\n *\r\n * @public\r\n */\r\nclass ReCaptchaV3Provider {\r\n    /**\r\n     * Create a ReCaptchaV3Provider instance.\r\n     * @param siteKey - ReCAPTCHA V3 siteKey.\r\n     */\r\n    constructor(_siteKey) {\r\n        this._siteKey = _siteKey;\r\n        /**\r\n         * Throttle requests on certain error codes to prevent too many retries\r\n         * in a short time.\r\n         */\r\n        this._throttleData = null;\r\n    }\r\n    /**\r\n     * Returns an App Check token.\r\n     * @internal\r\n     */\r\n    async getToken() {\r\n        var _a, _b, _c;\r\n        throwIfThrottled(this._throttleData);\r\n        // Top-level `getToken()` has already checked that App Check is initialized\r\n        // and therefore this._app and this._heartbeatServiceProvider are available.\r\n        const attestedClaimsToken = await getToken$1(this._app).catch(_e => {\r\n            // reCaptcha.execute() throws null which is not very descriptive.\r\n            throw ERROR_FACTORY.create(\"recaptcha-error\" /* AppCheckError.RECAPTCHA_ERROR */);\r\n        });\r\n        // Check if a failure state was set by the recaptcha \"error-callback\".\r\n        if (!((_a = getStateReference(this._app).reCAPTCHAState) === null || _a === void 0 ? void 0 : _a.succeeded)) {\r\n            throw ERROR_FACTORY.create(\"recaptcha-error\" /* AppCheckError.RECAPTCHA_ERROR */);\r\n        }\r\n        let result;\r\n        try {\r\n            result = await exchangeToken(getExchangeRecaptchaV3TokenRequest(this._app, attestedClaimsToken), this._heartbeatServiceProvider);\r\n        }\r\n        catch (e) {\r\n            if ((_b = e.code) === null || _b === void 0 ? void 0 : _b.includes(\"fetch-status-error\" /* AppCheckError.FETCH_STATUS_ERROR */)) {\r\n                this._throttleData = setBackoff(Number((_c = e.customData) === null || _c === void 0 ? void 0 : _c.httpStatus), this._throttleData);\r\n                throw ERROR_FACTORY.create(\"throttled\" /* AppCheckError.THROTTLED */, {\r\n                    time: getDurationString(this._throttleData.allowRequestsAfter - Date.now()),\r\n                    httpStatus: this._throttleData.httpStatus\r\n                });\r\n            }\r\n            else {\r\n                throw e;\r\n            }\r\n        }\r\n        // If successful, clear throttle data.\r\n        this._throttleData = null;\r\n        return result;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    initialize(app) {\r\n        this._app = app;\r\n        this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\r\n        initializeV3(app, this._siteKey).catch(() => {\r\n            /* we don't care about the initialization result */\r\n        });\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    isEqual(otherProvider) {\r\n        if (otherProvider instanceof ReCaptchaV3Provider) {\r\n            return this._siteKey === otherProvider._siteKey;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * App Check provider that can obtain a reCAPTCHA Enterprise token and exchange it\r\n * for an App Check token.\r\n *\r\n * @public\r\n */\r\nclass ReCaptchaEnterpriseProvider {\r\n    /**\r\n     * Create a ReCaptchaEnterpriseProvider instance.\r\n     * @param siteKey - reCAPTCHA Enterprise score-based site key.\r\n     */\r\n    constructor(_siteKey) {\r\n        this._siteKey = _siteKey;\r\n        /**\r\n         * Throttle requests on certain error codes to prevent too many retries\r\n         * in a short time.\r\n         */\r\n        this._throttleData = null;\r\n    }\r\n    /**\r\n     * Returns an App Check token.\r\n     * @internal\r\n     */\r\n    async getToken() {\r\n        var _a, _b, _c;\r\n        throwIfThrottled(this._throttleData);\r\n        // Top-level `getToken()` has already checked that App Check is initialized\r\n        // and therefore this._app and this._heartbeatServiceProvider are available.\r\n        const attestedClaimsToken = await getToken$1(this._app).catch(_e => {\r\n            // reCaptcha.execute() throws null which is not very descriptive.\r\n            throw ERROR_FACTORY.create(\"recaptcha-error\" /* AppCheckError.RECAPTCHA_ERROR */);\r\n        });\r\n        // Check if a failure state was set by the recaptcha \"error-callback\".\r\n        if (!((_a = getStateReference(this._app).reCAPTCHAState) === null || _a === void 0 ? void 0 : _a.succeeded)) {\r\n            throw ERROR_FACTORY.create(\"recaptcha-error\" /* AppCheckError.RECAPTCHA_ERROR */);\r\n        }\r\n        let result;\r\n        try {\r\n            result = await exchangeToken(getExchangeRecaptchaEnterpriseTokenRequest(this._app, attestedClaimsToken), this._heartbeatServiceProvider);\r\n        }\r\n        catch (e) {\r\n            if ((_b = e.code) === null || _b === void 0 ? void 0 : _b.includes(\"fetch-status-error\" /* AppCheckError.FETCH_STATUS_ERROR */)) {\r\n                this._throttleData = setBackoff(Number((_c = e.customData) === null || _c === void 0 ? void 0 : _c.httpStatus), this._throttleData);\r\n                throw ERROR_FACTORY.create(\"throttled\" /* AppCheckError.THROTTLED */, {\r\n                    time: getDurationString(this._throttleData.allowRequestsAfter - Date.now()),\r\n                    httpStatus: this._throttleData.httpStatus\r\n                });\r\n            }\r\n            else {\r\n                throw e;\r\n            }\r\n        }\r\n        // If successful, clear throttle data.\r\n        this._throttleData = null;\r\n        return result;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    initialize(app) {\r\n        this._app = app;\r\n        this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\r\n        initializeEnterprise(app, this._siteKey).catch(() => {\r\n            /* we don't care about the initialization result */\r\n        });\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    isEqual(otherProvider) {\r\n        if (otherProvider instanceof ReCaptchaEnterpriseProvider) {\r\n            return this._siteKey === otherProvider._siteKey;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Custom provider class.\r\n * @public\r\n */\r\nclass CustomProvider {\r\n    constructor(_customProviderOptions) {\r\n        this._customProviderOptions = _customProviderOptions;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    async getToken() {\r\n        // custom provider\r\n        const customToken = await this._customProviderOptions.getToken();\r\n        // Try to extract IAT from custom token, in case this token is not\r\n        // being newly issued. JWT timestamps are in seconds since epoch.\r\n        const issuedAtTimeSeconds = issuedAtTime(customToken.token);\r\n        // Very basic validation, use current timestamp as IAT if JWT\r\n        // has no `iat` field or value is out of bounds.\r\n        const issuedAtTimeMillis = issuedAtTimeSeconds !== null &&\r\n            issuedAtTimeSeconds < Date.now() &&\r\n            issuedAtTimeSeconds > 0\r\n            ? issuedAtTimeSeconds * 1000\r\n            : Date.now();\r\n        return Object.assign(Object.assign({}, customToken), { issuedAtTimeMillis });\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    initialize(app) {\r\n        this._app = app;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    isEqual(otherProvider) {\r\n        if (otherProvider instanceof CustomProvider) {\r\n            return (this._customProviderOptions.getToken.toString() ===\r\n                otherProvider._customProviderOptions.getToken.toString());\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Set throttle data to block requests until after a certain time\r\n * depending on the failed request's status code.\r\n * @param httpStatus - Status code of failed request.\r\n * @param throttleData - `ThrottleData` object containing previous throttle\r\n * data state.\r\n * @returns Data about current throttle state and expiration time.\r\n */\r\nfunction setBackoff(httpStatus, throttleData) {\r\n    /**\r\n     * Block retries for 1 day for the following error codes:\r\n     *\r\n     * 404: Likely malformed URL.\r\n     *\r\n     * 403:\r\n     * - Attestation failed\r\n     * - Wrong API key\r\n     * - Project deleted\r\n     */\r\n    if (httpStatus === 404 || httpStatus === 403) {\r\n        return {\r\n            backoffCount: 1,\r\n            allowRequestsAfter: Date.now() + ONE_DAY,\r\n            httpStatus\r\n        };\r\n    }\r\n    else {\r\n        /**\r\n         * For all other error codes, the time when it is ok to retry again\r\n         * is based on exponential backoff.\r\n         */\r\n        const backoffCount = throttleData ? throttleData.backoffCount : 0;\r\n        const backoffMillis = calculateBackoffMillis(backoffCount, 1000, 2);\r\n        return {\r\n            backoffCount: backoffCount + 1,\r\n            allowRequestsAfter: Date.now() + backoffMillis,\r\n            httpStatus\r\n        };\r\n    }\r\n}\r\nfunction throwIfThrottled(throttleData) {\r\n    if (throttleData) {\r\n        if (Date.now() - throttleData.allowRequestsAfter <= 0) {\r\n            // If before, throw.\r\n            throw ERROR_FACTORY.create(\"throttled\" /* AppCheckError.THROTTLED */, {\r\n                time: getDurationString(throttleData.allowRequestsAfter - Date.now()),\r\n                httpStatus: throttleData.httpStatus\r\n            });\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Activate App Check for the given app. Can be called only once per app.\r\n * @param app - the {@link @firebase/app#FirebaseApp} to activate App Check for\r\n * @param options - App Check initialization options\r\n * @public\r\n */\r\nfunction initializeAppCheck(app = getApp(), options) {\r\n    app = getModularInstance(app);\r\n    const provider = _getProvider(app, 'app-check');\r\n    // Ensure initializeDebugMode() is only called once.\r\n    if (!getDebugState().initialized) {\r\n        initializeDebugMode();\r\n    }\r\n    // Log a message containing the debug token when `initializeAppCheck()`\r\n    // is called in debug mode.\r\n    if (isDebugMode()) {\r\n        // Do not block initialization to get the token for the message.\r\n        void getDebugToken().then(token => \r\n        // Not using logger because I don't think we ever want this accidentally hidden.\r\n        console.log(`App Check debug token: ${token}. You will need to add it to your app's App Check settings in the Firebase console for it to work.`));\r\n    }\r\n    if (provider.isInitialized()) {\r\n        const existingInstance = provider.getImmediate();\r\n        const initialOptions = provider.getOptions();\r\n        if (initialOptions.isTokenAutoRefreshEnabled ===\r\n            options.isTokenAutoRefreshEnabled &&\r\n            initialOptions.provider.isEqual(options.provider)) {\r\n            return existingInstance;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"already-initialized\" /* AppCheckError.ALREADY_INITIALIZED */, {\r\n                appName: app.name\r\n            });\r\n        }\r\n    }\r\n    const appCheck = provider.initialize({ options });\r\n    _activate(app, options.provider, options.isTokenAutoRefreshEnabled);\r\n    // If isTokenAutoRefreshEnabled is false, do not send any requests to the\r\n    // exchange endpoint without an explicit call from the user either directly\r\n    // or through another Firebase library (storage, functions, etc.)\r\n    if (getStateReference(app).isTokenAutoRefreshEnabled) {\r\n        // Adding a listener will start the refresher and fetch a token if needed.\r\n        // This gets a token ready and prevents a delay when an internal library\r\n        // requests the token.\r\n        // Listener function does not need to do anything, its base functionality\r\n        // of calling getToken() already fetches token and writes it to memory/storage.\r\n        addTokenListener(appCheck, \"INTERNAL\" /* ListenerType.INTERNAL */, () => { });\r\n    }\r\n    return appCheck;\r\n}\r\n/**\r\n * Activate App Check\r\n * @param app - Firebase app to activate App Check for.\r\n * @param provider - reCAPTCHA v3 provider or\r\n * custom token provider.\r\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\r\n * refreshes App Check tokens as needed. If undefined, defaults to the\r\n * value of `app.automaticDataCollectionEnabled`, which defaults to\r\n * false and can be set in the app config.\r\n */\r\nfunction _activate(app, provider, isTokenAutoRefreshEnabled) {\r\n    // Create an entry in the APP_CHECK_STATES map. Further changes should\r\n    // directly mutate this object.\r\n    const state = setInitialState(app, Object.assign({}, DEFAULT_STATE));\r\n    state.activated = true;\r\n    state.provider = provider; // Read cached token from storage if it exists and store it in memory.\r\n    state.cachedTokenPromise = readTokenFromStorage(app).then(cachedToken => {\r\n        if (cachedToken && isValid(cachedToken)) {\r\n            state.token = cachedToken;\r\n            // notify all listeners with the cached token\r\n            notifyTokenListeners(app, { token: cachedToken.token });\r\n        }\r\n        return cachedToken;\r\n    });\r\n    // Use value of global `automaticDataCollectionEnabled` (which\r\n    // itself defaults to false if not specified in config) if\r\n    // `isTokenAutoRefreshEnabled` param was not provided by user.\r\n    state.isTokenAutoRefreshEnabled =\r\n        isTokenAutoRefreshEnabled === undefined\r\n            ? app.automaticDataCollectionEnabled\r\n            : isTokenAutoRefreshEnabled;\r\n    state.provider.initialize(app);\r\n}\r\n/**\r\n * Set whether App Check will automatically refresh tokens as needed.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\r\n * refreshes App Check tokens as needed. This overrides any value set\r\n * during `initializeAppCheck()`.\r\n * @public\r\n */\r\nfunction setTokenAutoRefreshEnabled(appCheckInstance, isTokenAutoRefreshEnabled) {\r\n    const app = appCheckInstance.app;\r\n    const state = getStateReference(app);\r\n    // This will exist if any product libraries have called\r\n    // `addTokenListener()`\r\n    if (state.tokenRefresher) {\r\n        if (isTokenAutoRefreshEnabled === true) {\r\n            state.tokenRefresher.start();\r\n        }\r\n        else {\r\n            state.tokenRefresher.stop();\r\n        }\r\n    }\r\n    state.isTokenAutoRefreshEnabled = isTokenAutoRefreshEnabled;\r\n}\r\n/**\r\n * Get the current App Check token. If `forceRefresh` is false, this function first\r\n * checks for a valid token in memory, then local persistence (IndexedDB).\r\n * If not found, or if `forceRefresh` is true, it makes a request to the\r\n * App Check endpoint for a fresh token. That request attaches\r\n * to the most recent in-flight request if one is present.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @param forceRefresh - If true, will always try to fetch a fresh token.\r\n * If false, will use a cached token if found in storage.\r\n * @public\r\n */\r\nasync function getToken(appCheckInstance, forceRefresh) {\r\n    const result = await getToken$2(appCheckInstance, forceRefresh);\r\n    if (result.error) {\r\n        throw result.error;\r\n    }\r\n    return { token: result.token };\r\n}\r\n/**\r\n * Requests a Firebase App Check token. This method should be used\r\n * only if you need to authorize requests to a non-Firebase backend.\r\n *\r\n * Returns limited-use tokens that are intended for use with your\r\n * non-Firebase backend endpoints that are protected with\r\n * <a href=\"https://firebase.google.com/docs/app-check/custom-resource-backend#replay-protection\">\r\n * Replay Protection</a>. This method\r\n * does not affect the token generation behavior of the\r\n * #getAppCheckToken() method.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @returns The limited use token.\r\n * @public\r\n */\r\nfunction getLimitedUseToken(appCheckInstance) {\r\n    return getLimitedUseToken$1(appCheckInstance);\r\n}\r\n/**\r\n * Wraps `addTokenListener`/`removeTokenListener` methods in an `Observer`\r\n * pattern for public use.\r\n */\r\nfunction onTokenChanged(appCheckInstance, onNextOrObserver, onError, \r\n/**\r\n * NOTE: Although an `onCompletion` callback can be provided, it will\r\n * never be called because the token stream is never-ending.\r\n * It is added only for API consistency with the observer pattern, which\r\n * we follow in JS APIs.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nonCompletion) {\r\n    let nextFn = () => { };\r\n    let errorFn = () => { };\r\n    if (onNextOrObserver.next != null) {\r\n        nextFn = onNextOrObserver.next.bind(onNextOrObserver);\r\n    }\r\n    else {\r\n        nextFn = onNextOrObserver;\r\n    }\r\n    if (onNextOrObserver.error != null) {\r\n        errorFn = onNextOrObserver.error.bind(onNextOrObserver);\r\n    }\r\n    else if (onError) {\r\n        errorFn = onError;\r\n    }\r\n    addTokenListener(appCheckInstance, \"EXTERNAL\" /* ListenerType.EXTERNAL */, nextFn, errorFn);\r\n    return () => removeTokenListener(appCheckInstance.app, nextFn);\r\n}\n\n/**\r\n * The Firebase App Check Web SDK.\r\n *\r\n * @remarks\r\n * Firebase App Check does not work in a Node.js environment using `ReCaptchaV3Provider` or\r\n * `ReCaptchaEnterpriseProvider`, but can be used in Node.js if you use\r\n * `CustomProvider` and write your own attestation method.\r\n *\r\n * @packageDocumentation\r\n */\r\nconst APP_CHECK_NAME = 'app-check';\r\nconst APP_CHECK_NAME_INTERNAL = 'app-check-internal';\r\nfunction registerAppCheck() {\r\n    // The public interface\r\n    _registerComponent(new Component(APP_CHECK_NAME, container => {\r\n        // getImmediate for FirebaseApp will always succeed\r\n        const app = container.getProvider('app').getImmediate();\r\n        const heartbeatServiceProvider = container.getProvider('heartbeat');\r\n        return factory(app, heartbeatServiceProvider);\r\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */)\r\n        .setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */)\r\n        /**\r\n         * Initialize app-check-internal after app-check is initialized to make AppCheck available to\r\n         * other Firebase SDKs\r\n         */\r\n        .setInstanceCreatedCallback((container, _identifier, _appcheckService) => {\r\n        container.getProvider(APP_CHECK_NAME_INTERNAL).initialize();\r\n    }));\r\n    // The internal interface used by other Firebase products\r\n    _registerComponent(new Component(APP_CHECK_NAME_INTERNAL, container => {\r\n        const appCheck = container.getProvider('app-check').getImmediate();\r\n        return internalFactory(appCheck);\r\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */).setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */));\r\n    registerVersion(name, version);\r\n}\r\nregisterAppCheck();\n\nexport { CustomProvider, ReCaptchaEnterpriseProvider, ReCaptchaV3Provider, getLimitedUseToken, getToken, initializeAppCheck, onTokenChanged, setTokenAutoRefreshEnabled };\n\n", "import { ɵAPP_CHECK_PROVIDER_NAME, ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, ɵAppCheckInstances, VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\nexport { ɵAppCheckInstances as AppCheckInstances } from '@angular/fire';\nimport { from, timer } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport { isPlatformServer } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, Optional, PLATFORM_ID, NgModule, NgZone, Injector, makeEnvironmentProviders } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { getLimitedUseToken as getLimitedUseToken$1, getToken as getToken$1, initializeAppCheck as initializeAppCheck$1, onTokenChanged as onTokenChanged$1, setTokenAutoRefreshEnabled as setTokenAutoRefreshEnabled$1 } from 'firebase/app-check';\nexport * from 'firebase/app-check';\nclass AppCheck {\n  constructor(appCheck) {\n    return appCheck;\n  }\n}\nconst appCheckInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(ɵAPP_CHECK_PROVIDER_NAME))), distinct());\nconst PROVIDED_APP_CHECK_INSTANCES = new InjectionToken('angularfire2.app-check-instances');\nfunction defaultAppCheckInstanceFactory(provided, defaultApp) {\n  const defaultAppCheck = ɵgetDefaultInstanceOf(ɵAPP_CHECK_PROVIDER_NAME, provided, defaultApp);\n  return defaultAppCheck && new AppCheck(defaultAppCheck);\n}\nconst LOCALHOSTS = ['localhost', '0.0.0.0', '127.0.0.1'];\nconst isLocalhost = typeof window !== 'undefined' && LOCALHOSTS.includes(window.location.hostname);\nfunction appCheckInstanceFactory(fn) {\n  return (zone, injector, platformId) => {\n    // Node should use admin token provider, browser devmode and localhost should use debug token\n    if (!isPlatformServer(platformId) && (isDevMode() || isLocalhost)) {\n      globalThis.FIREBASE_APPCHECK_DEBUG_TOKEN ??= true;\n    }\n    const appCheck = zone.runOutsideAngular(() => fn(injector));\n    return new AppCheck(appCheck);\n  };\n}\nconst APP_CHECK_INSTANCES_PROVIDER = {\n  provide: ɵAppCheckInstances,\n  deps: [[new Optional(), PROVIDED_APP_CHECK_INSTANCES]]\n};\nconst DEFAULT_APP_CHECK_INSTANCE_PROVIDER = {\n  provide: AppCheck,\n  useFactory: defaultAppCheckInstanceFactory,\n  deps: [[new Optional(), PROVIDED_APP_CHECK_INSTANCES], FirebaseApp, PLATFORM_ID]\n};\nclass AppCheckModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'app-check');\n  }\n  static ɵfac = function AppCheckModule_Factory(t) {\n    return new (t || AppCheckModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: AppCheckModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_APP_CHECK_INSTANCE_PROVIDER, APP_CHECK_INSTANCES_PROVIDER]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AppCheckModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_APP_CHECK_INSTANCE_PROVIDER, APP_CHECK_INSTANCES_PROVIDER]\n    }]\n  }], () => [], null);\n})();\nfunction provideAppCheck(fn, ...deps) {\n  registerVersion('angularfire', VERSION.full, 'app-check');\n  return makeEnvironmentProviders([DEFAULT_APP_CHECK_INSTANCE_PROVIDER, APP_CHECK_INSTANCES_PROVIDER, {\n    provide: PROVIDED_APP_CHECK_INSTANCES,\n    useFactory: appCheckInstanceFactory(fn),\n    multi: true,\n    deps: [NgZone, Injector, PLATFORM_ID, ɵAngularFireSchedulers, FirebaseApps, ...deps]\n  }]);\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst getLimitedUseToken = ɵzoneWrap(getLimitedUseToken$1, true);\nconst getToken = ɵzoneWrap(getToken$1, true);\nconst initializeAppCheck = ɵzoneWrap(initializeAppCheck$1, true);\nconst onTokenChanged = ɵzoneWrap(onTokenChanged$1, true);\nconst setTokenAutoRefreshEnabled = ɵzoneWrap(setTokenAutoRefreshEnabled$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AppCheck, AppCheckModule, appCheckInstance$, getLimitedUseToken, getToken, initializeAppCheck, onTokenChanged, provideAppCheck, setTokenAutoRefreshEnabled };\n", "import firebase from '@firebase/app-compat';\nexport { default } from '@firebase/app-compat';\n\nvar name = \"firebase\";\nvar version = \"10.14.1\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfirebase.registerVersion(name, version, 'app-compat');\n\n", "import * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, NgZone, Optional, VERSION as VERSION$1, PLATFORM_ID, NgModule, Inject } from '@angular/core';\nimport { VERSION } from '@angular/fire';\nimport firebase from 'firebase/compat/app';\n\n// DEBUG quick debugger function for inline logging that typescript doesn't complain about\n//       wrote it for debugging the ɵlazySDKProxy, commenting out for now; should consider exposing a\n//       verbose mode for AngularFire in a future release that uses something like this in multiple places\n//       usage: () => log('something') || returnValue\n// const log = (...args: any[]): false => { console.log(...args); return false }\n// The problem here are things like ngOnDestroy are missing, then triggering the service\n// rather than dig too far; I'm capturing these as I go.\nconst noopFunctions = ['ngOnDestroy'];\n// INVESTIGATE should we make the Proxy revokable and do some cleanup?\n//             right now it's fairly simple but I'm sure this will grow in complexity\nconst ɵlazySDKProxy = (klass, observable, zone, options = {}) => {\n  return new Proxy(klass, {\n    get: (_, name) => zone.runOutsideAngular(() => {\n      if (klass[name]) {\n        if (options?.spy?.get) {\n          options.spy.get(name, klass[name]);\n        }\n        return klass[name];\n      }\n      if (noopFunctions.indexOf(name) > -1) {\n        return () => undefined;\n      }\n      const promise = observable.toPromise().then(mod => {\n        const ret = mod?.[name];\n        // TODO move to proper type guards\n        if (typeof ret === 'function') {\n          return ret.bind(mod);\n        } else if (ret?.then) {\n          return ret.then(res => zone.run(() => res));\n        } else {\n          return zone.run(() => ret);\n        }\n      });\n      // recurse the proxy\n      return new Proxy(() => undefined, {\n        get: (_, name) => promise[name],\n        // TODO handle callbacks as transparently as I can\n        apply: (self, _, args) => promise.then(it => {\n          const res = it?.(...args);\n          if (options?.spy?.apply) {\n            options.spy.apply(name, args, res);\n          }\n          return res;\n        })\n      });\n    })\n  });\n};\nconst ɵapplyMixins = (derivedCtor, constructors) => {\n  constructors.forEach(baseCtor => {\n    Object.getOwnPropertyNames(baseCtor.prototype || baseCtor).forEach(name => {\n      Object.defineProperty(derivedCtor.prototype, name, Object.getOwnPropertyDescriptor(baseCtor.prototype || baseCtor, name));\n    });\n  });\n};\nclass FirebaseApp {\n  constructor(app) {\n    return app;\n  }\n}\nconst FIREBASE_OPTIONS = new InjectionToken('angularfire2.app.options');\nconst FIREBASE_APP_NAME = new InjectionToken('angularfire2.app.name');\nfunction ɵfirebaseAppFactory(options, zone, nameOrConfig) {\n  const name = typeof nameOrConfig === 'string' && nameOrConfig || '[DEFAULT]';\n  const config = typeof nameOrConfig === 'object' && nameOrConfig || {};\n  config.name = config.name || name;\n  // Added any due to some inconsistency between @firebase/app and firebase types\n  const existingApp = firebase.apps.filter(app => app && app.name === config.name)[0];\n  // We support FirebaseConfig, initializeApp's public type only accepts string; need to cast as any\n  // Could be solved with https://github.com/firebase/firebase-js-sdk/pull/1206\n  const app = existingApp || zone.runOutsideAngular(() => firebase.initializeApp(options, config));\n  try {\n    if (JSON.stringify(options) !== JSON.stringify(app.options)) {\n      const hmr = !!module.hot;\n      log$1('error', `${app.name} Firebase App already initialized with different options${hmr ? ', you may need to reload as Firebase is not HMR aware.' : '.'}`);\n    }\n  } catch (e) {/* empty */}\n  return new FirebaseApp(app);\n}\nconst log$1 = (level, ...args) => {\n  if (isDevMode() && typeof console !== 'undefined') {\n    // eslint-disable-next-line no-console\n    console[level](...args);\n  }\n};\nconst FIREBASE_APP_PROVIDER = {\n  provide: FirebaseApp,\n  useFactory: ɵfirebaseAppFactory,\n  deps: [FIREBASE_OPTIONS, NgZone, [new Optional(), FIREBASE_APP_NAME]]\n};\nclass AngularFireModule {\n  static initializeApp(options, nameOrConfig) {\n    return {\n      ngModule: AngularFireModule,\n      providers: [{\n        provide: FIREBASE_OPTIONS,\n        useValue: options\n      }, {\n        provide: FIREBASE_APP_NAME,\n        useValue: nameOrConfig\n      }]\n    };\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  constructor(platformId) {\n    firebase.registerVersion('angularfire', VERSION.full, 'core');\n    firebase.registerVersion('angularfire', VERSION.full, 'app-compat');\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    firebase.registerVersion('angular', VERSION$1.full, platformId.toString());\n  }\n  static ɵfac = function AngularFireModule_Factory(t) {\n    return new (t || AngularFireModule)(i0.ɵɵinject(PLATFORM_ID));\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: AngularFireModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [FIREBASE_APP_PROVIDER]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AngularFireModule, [{\n    type: NgModule,\n    args: [{\n      providers: [FIREBASE_APP_PROVIDER]\n    }]\n  }], () => [{\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }], null);\n})();\nfunction ɵcacheInstance(cacheKey, moduleName, appName, fn, deps) {\n  const [, instance, cachedDeps] = globalThis.ɵAngularfireInstanceCache.find(it => it[0] === cacheKey) || [];\n  if (instance) {\n    if (!matchDep(deps, cachedDeps)) {\n      log('error', `${moduleName} was already initialized on the ${appName} Firebase App with different settings.${IS_HMR ? ' You may need to reload as Firebase is not HMR aware.' : ''}`);\n      log('warn', {\n        is: deps,\n        was: cachedDeps\n      });\n    }\n    return instance;\n  } else {\n    const newInstance = fn();\n    globalThis.ɵAngularfireInstanceCache.push([cacheKey, newInstance, deps]);\n    return newInstance;\n  }\n}\nfunction matchDep(a, b) {\n  try {\n    return a.toString() === b.toString();\n  } catch (_) {\n    return a === b;\n  }\n}\nconst IS_HMR = typeof module !== 'undefined' && !!module.hot;\nconst log = (level, ...args) => {\n  if (isDevMode() && typeof console !== 'undefined') {\n    // eslint-disable-next-line no-console\n    console[level](...args);\n  }\n};\nglobalThis.ɵAngularfireInstanceCache ||= [];\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AngularFireModule, FIREBASE_APP_NAME, FIREBASE_OPTIONS, FirebaseApp, ɵapplyMixins, ɵcacheInstance, ɵfirebaseAppFactory, ɵlazySDKProxy };\n", "import 'firebase/compat/auth';\nimport { isPlatformServer } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, NgModule } from '@angular/core';\nimport * as i1 from '@angular/fire';\nimport { keepUnstableUntilFirst, VERSION } from '@angular/fire';\nimport * as i2 from '@angular/fire/app-check';\nimport { ɵcacheInstance, ɵfirebaseAppFactory, ɵlazySDKProxy, FIREBASE_OPTIONS, FIREBASE_APP_NAME, ɵapplyMixins } from '@angular/fire/compat';\nimport { Subject, of, Observable, from, merge } from 'rxjs';\nimport { observeOn, switchMap, map, shareReplay, first, switchMapTo, subscribeOn, filter } from 'rxjs/operators';\nimport firebase from 'firebase/compat/app';\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\n// Export a null object with the same keys as firebase/compat/auth, so Proxy can work with proxy-polyfill in Internet Explorer\nconst proxyPolyfillCompat = {\n  name: null,\n  config: null,\n  emulatorConfig: null,\n  app: null,\n  applyActionCode: null,\n  checkActionCode: null,\n  confirmPasswordReset: null,\n  createUserWithEmailAndPassword: null,\n  currentUser: null,\n  fetchSignInMethodsForEmail: null,\n  isSignInWithEmailLink: null,\n  getRedirectResult: null,\n  languageCode: null,\n  settings: null,\n  onAuthStateChanged: null,\n  onIdTokenChanged: null,\n  sendSignInLinkToEmail: null,\n  sendPasswordResetEmail: null,\n  setPersistence: null,\n  signInAndRetrieveDataWithCredential: null,\n  signInAnonymously: null,\n  signInWithCredential: null,\n  signInWithCustomToken: null,\n  signInWithEmailAndPassword: null,\n  signInWithPhoneNumber: null,\n  signInWithEmailLink: null,\n  signInWithPopup: null,\n  signInWithRedirect: null,\n  signOut: null,\n  tenantId: null,\n  updateCurrentUser: null,\n  useDeviceLanguage: null,\n  useEmulator: null,\n  verifyPasswordResetCode: null\n};\nconst USE_EMULATOR = new InjectionToken('angularfire2.auth.use-emulator');\nconst SETTINGS = new InjectionToken('angularfire2.auth.settings');\nconst TENANT_ID = new InjectionToken('angularfire2.auth.tenant-id');\nconst LANGUAGE_CODE = new InjectionToken('angularfire2.auth.langugage-code');\nconst USE_DEVICE_LANGUAGE = new InjectionToken('angularfire2.auth.use-device-language');\nconst PERSISTENCE = new InjectionToken('angularfire.auth.persistence');\nconst ɵauthFactory = (app, zone, useEmulator, tenantId, languageCode, useDeviceLanguage, settings, persistence) => ɵcacheInstance(`${app.name}.auth`, 'AngularFireAuth', app.name, () => {\n  const auth = zone.runOutsideAngular(() => app.auth());\n  if (useEmulator) {\n    auth.useEmulator(...useEmulator);\n  }\n  if (tenantId) {\n    auth.tenantId = tenantId;\n  }\n  auth.languageCode = languageCode;\n  if (useDeviceLanguage) {\n    auth.useDeviceLanguage();\n  }\n  if (settings) {\n    for (const [k, v] of Object.entries(settings)) {\n      auth.settings[k] = v;\n    }\n  }\n  if (persistence) {\n    auth.setPersistence(persistence);\n  }\n  return auth;\n}, [useEmulator, tenantId, languageCode, useDeviceLanguage, settings, persistence]);\nclass AngularFireAuth {\n  /**\n   * Observable of authentication state; as of Firebase 4.0 this is only triggered via sign-in/out\n   */\n  authState;\n  /**\n   * Observable of the currently signed-in user's JWT token used to identify the user to a Firebase service (or null).\n   */\n  idToken;\n  /**\n   * Observable of the currently signed-in user (or null).\n   */\n  user;\n  /**\n   * Observable of the currently signed-in user's IdTokenResult object which contains the ID token JWT string and other\n   * helper properties for getting different data associated with the token as well as all the decoded payload claims\n   * (or null).\n   */\n  idTokenResult;\n  /**\n   * Observable of the currently signed-in user's credential, or null\n   */\n  credential;\n  constructor(options, name,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  platformId, zone, schedulers, useEmulator,\n  // can't use the tuple here\n  settings,\n  // can't use firebase.auth.AuthSettings here\n  tenantId, languageCode, useDeviceLanguage, persistence, _appCheckInstances) {\n    const logins = new Subject();\n    const auth = of(undefined).pipe(observeOn(schedulers.outsideAngular), switchMap(() => zone.runOutsideAngular(() => import('firebase/compat/auth'))), map(() => ɵfirebaseAppFactory(options, zone, name)), map(app => ɵauthFactory(app, zone, useEmulator, tenantId, languageCode, useDeviceLanguage, settings, persistence)), shareReplay({\n      bufferSize: 1,\n      refCount: false\n    }));\n    if (isPlatformServer(platformId)) {\n      this.authState = this.user = this.idToken = this.idTokenResult = this.credential = of(null);\n    } else {\n      // HACK, as we're exporting auth.Auth, rather than auth, developers importing firebase.auth\n      //       (e.g, `import { auth } from 'firebase/compat/app'`) are getting an undefined auth object unexpectedly\n      //       as we're completely lazy. Let's eagerly load the Auth SDK here.\n      //       There could potentially be race conditions still... but this greatly decreases the odds while\n      //       we reevaluate the API.\n      auth.pipe(first()).subscribe();\n      const redirectResult = auth.pipe(switchMap(auth => auth.getRedirectResult().then(it => it, () => null)), keepUnstableUntilFirst, shareReplay({\n        bufferSize: 1,\n        refCount: false\n      }));\n      const authStateChanged = auth.pipe(switchMap(auth => new Observable(sub => ({\n        unsubscribe: zone.runOutsideAngular(() => auth.onAuthStateChanged(next => sub.next(next), err => sub.error(err), () => sub.complete()))\n      }))));\n      const idTokenChanged = auth.pipe(switchMap(auth => new Observable(sub => ({\n        unsubscribe: zone.runOutsideAngular(() => auth.onIdTokenChanged(next => sub.next(next), err => sub.error(err), () => sub.complete()))\n      }))));\n      this.authState = redirectResult.pipe(switchMapTo(authStateChanged), subscribeOn(schedulers.outsideAngular), observeOn(schedulers.insideAngular));\n      this.user = redirectResult.pipe(switchMapTo(idTokenChanged), subscribeOn(schedulers.outsideAngular), observeOn(schedulers.insideAngular));\n      this.idToken = this.user.pipe(switchMap(user => user ? from(user.getIdToken()) : of(null)));\n      this.idTokenResult = this.user.pipe(switchMap(user => user ? from(user.getIdTokenResult()) : of(null)));\n      this.credential = merge(redirectResult, logins,\n      // pipe in null authState to make credential zipable, just a weird devexp if\n      // authState and user go null to still have a credential\n      this.authState.pipe(filter(it => !it))).pipe(\n      // handle the { user: { } } when a user is already logged in, rather have null\n      // TODO handle the type corcersion better\n      map(credential => credential?.user ? credential : null), subscribeOn(schedulers.outsideAngular), observeOn(schedulers.insideAngular));\n    }\n    return ɵlazySDKProxy(this, auth, zone, {\n      spy: {\n        apply: (name, _, val) => {\n          // If they call a signIn or createUser function listen into the promise\n          // this will give us the user credential, push onto the logins Subject\n          // to be consumed in .credential\n          if (name.startsWith('signIn') || name.startsWith('createUser')) {\n            // TODO fix the types, the trouble is UserCredential has everything optional\n            val.then(user => logins.next(user));\n          }\n        }\n      }\n    });\n  }\n  static ɵfac = function AngularFireAuth_Factory(t) {\n    return new (t || AngularFireAuth)(i0.ɵɵinject(FIREBASE_OPTIONS), i0.ɵɵinject(FIREBASE_APP_NAME, 8), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.ɵAngularFireSchedulers), i0.ɵɵinject(USE_EMULATOR, 8), i0.ɵɵinject(SETTINGS, 8), i0.ɵɵinject(TENANT_ID, 8), i0.ɵɵinject(LANGUAGE_CODE, 8), i0.ɵɵinject(USE_DEVICE_LANGUAGE, 8), i0.ɵɵinject(PERSISTENCE, 8), i0.ɵɵinject(i2.AppCheckInstances, 8));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: AngularFireAuth,\n    factory: AngularFireAuth.ɵfac,\n    providedIn: 'any'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AngularFireAuth, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'any'\n    }]\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [FIREBASE_OPTIONS]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [FIREBASE_APP_NAME]\n    }]\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: i0.NgZone\n  }, {\n    type: i1.ɵAngularFireSchedulers\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [USE_EMULATOR]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [SETTINGS]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [TENANT_ID]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [LANGUAGE_CODE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [USE_DEVICE_LANGUAGE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [PERSISTENCE]\n    }]\n  }, {\n    type: i2.AppCheckInstances,\n    decorators: [{\n      type: Optional\n    }]\n  }], null);\n})();\nɵapplyMixins(AngularFireAuth, [proxyPolyfillCompat]);\nclass AngularFireAuthModule {\n  constructor() {\n    firebase.registerVersion('angularfire', VERSION.full, 'auth-compat');\n  }\n  static ɵfac = function AngularFireAuthModule_Factory(t) {\n    return new (t || AngularFireAuthModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: AngularFireAuthModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [AngularFireAuth]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AngularFireAuthModule, [{\n    type: NgModule,\n    args: [{\n      providers: [AngularFireAuth]\n    }]\n  }], () => [], null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AngularFireAuth, AngularFireAuthModule, LANGUAGE_CODE, PERSISTENCE, SETTINGS, TENANT_ID, USE_DEVICE_LANGUAGE, USE_EMULATOR, ɵauthFactory };\n", "import firebase from '@firebase/app-compat';\nimport { FirestoreError, Bytes, _isBase64Available, enableIndexedDbPersistence, enableMultiTabIndexedDbPersistence, clearIndexedDbPersistence, _DatabaseId, _logWarn, connectFirestoreEmulator, enableNetwork, disableNetwork, _validateIsNotUsedTogether, waitForPendingWrites, onSnapshotsInSync, collection, doc, collectionGroup, runTransaction, ensureFirestoreConfigured, WriteBatch as WriteBatch$1, executeWrite, loadBundle, namedQuery, DocumentSnapshot as DocumentSnapshot$1, DocumentReference as DocumentReference$1, _DocumentKey, refEqual, setDoc, updateDoc, deleteDoc, onSnapshot, getDocFromCache, getDocFromServer, getDoc, snapshotEqual, query, where, orderBy, limit, limitToLast, startAt, startAfter, endBefore, endAt, queryEqual, getDocsFromCache, getDocsFromServer, getDocs, QuerySnapshot as QuerySnapshot$1, addDoc, _cast, AbstractUserDataWriter, setLogLevel as setLogLevel$1, QueryDocumentSnapshot as QueryDocumentSnapshot$1, _debugAssert, FieldPath as FieldPath$1, _FieldPath, serverTimestamp, deleteField, arrayUnion, arrayRemove, increment, GeoPoint, Timestamp, CACHE_SIZE_UNLIMITED } from '@firebase/firestore';\nimport { getModularInstance } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\nconst name = \"@firebase/firestore-compat\";\nconst version = \"0.3.38\";\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction validateSetOptions(methodName, options) {\r\n    if (options === undefined) {\r\n        return {\r\n            merge: false\r\n        };\r\n    }\r\n    if (options.mergeFields !== undefined && options.merge !== undefined) {\r\n        throw new FirestoreError('invalid-argument', `Invalid options passed to function ${methodName}(): You cannot ` +\r\n            'specify both \"merge\" and \"mergeFields\".');\r\n    }\r\n    return options;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Helper function to assert Uint8Array is available at runtime. */\r\nfunction assertUint8ArrayAvailable() {\r\n    if (typeof Uint8Array === 'undefined') {\r\n        throw new FirestoreError('unimplemented', 'Uint8Arrays are not available in this environment.');\r\n    }\r\n}\r\n/** Helper function to assert Base64 functions are available at runtime. */\r\nfunction assertBase64Available() {\r\n    if (!_isBase64Available()) {\r\n        throw new FirestoreError('unimplemented', 'Blobs are unavailable in Firestore in this environment.');\r\n    }\r\n}\r\n/** Immutable class holding a blob (binary data) */\r\nclass Blob {\r\n    constructor(_delegate) {\r\n        this._delegate = _delegate;\r\n    }\r\n    static fromBase64String(base64) {\r\n        assertBase64Available();\r\n        return new Blob(Bytes.fromBase64String(base64));\r\n    }\r\n    static fromUint8Array(array) {\r\n        assertUint8ArrayAvailable();\r\n        return new Blob(Bytes.fromUint8Array(array));\r\n    }\r\n    toBase64() {\r\n        assertBase64Available();\r\n        return this._delegate.toBase64();\r\n    }\r\n    toUint8Array() {\r\n        assertUint8ArrayAvailable();\r\n        return this._delegate.toUint8Array();\r\n    }\r\n    isEqual(other) {\r\n        return this._delegate.isEqual(other._delegate);\r\n    }\r\n    toString() {\r\n        return 'Blob(base64: ' + this.toBase64() + ')';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isPartialObserver(obj) {\r\n    return implementsAnyMethods(obj, ['next', 'error', 'complete']);\r\n}\r\n/**\r\n * Returns true if obj is an object and contains at least one of the specified\r\n * methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    const object = obj;\r\n    for (const method of methods) {\r\n        if (method in object && typeof object[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The persistence provider included with the full Firestore SDK.\r\n */\r\nclass IndexedDbPersistenceProvider {\r\n    enableIndexedDbPersistence(firestore, forceOwnership) {\r\n        return enableIndexedDbPersistence(firestore._delegate, { forceOwnership });\r\n    }\r\n    enableMultiTabIndexedDbPersistence(firestore) {\r\n        return enableMultiTabIndexedDbPersistence(firestore._delegate);\r\n    }\r\n    clearIndexedDbPersistence(firestore) {\r\n        return clearIndexedDbPersistence(firestore._delegate);\r\n    }\r\n}\r\n/**\r\n * Compat class for Firestore. Exposes Firestore Legacy API, but delegates\r\n * to the functional API of firestore-exp.\r\n */\r\nclass Firestore {\r\n    constructor(databaseIdOrApp, _delegate, _persistenceProvider) {\r\n        this._delegate = _delegate;\r\n        this._persistenceProvider = _persistenceProvider;\r\n        this.INTERNAL = {\r\n            delete: () => this.terminate()\r\n        };\r\n        if (!(databaseIdOrApp instanceof _DatabaseId)) {\r\n            this._appCompat = databaseIdOrApp;\r\n        }\r\n    }\r\n    get _databaseId() {\r\n        return this._delegate._databaseId;\r\n    }\r\n    settings(settingsLiteral) {\r\n        const currentSettings = this._delegate._getSettings();\r\n        if (!settingsLiteral.merge &&\r\n            currentSettings.host !== settingsLiteral.host) {\r\n            _logWarn('You are overriding the original host. If you did not intend ' +\r\n                'to override your settings, use {merge: true}.');\r\n        }\r\n        if (settingsLiteral.merge) {\r\n            settingsLiteral = Object.assign(Object.assign({}, currentSettings), settingsLiteral);\r\n            // Remove the property from the settings once the merge is completed\r\n            delete settingsLiteral.merge;\r\n        }\r\n        this._delegate._setSettings(settingsLiteral);\r\n    }\r\n    useEmulator(host, port, options = {}) {\r\n        connectFirestoreEmulator(this._delegate, host, port, options);\r\n    }\r\n    enableNetwork() {\r\n        return enableNetwork(this._delegate);\r\n    }\r\n    disableNetwork() {\r\n        return disableNetwork(this._delegate);\r\n    }\r\n    enablePersistence(settings) {\r\n        let synchronizeTabs = false;\r\n        let experimentalForceOwningTab = false;\r\n        if (settings) {\r\n            synchronizeTabs = !!settings.synchronizeTabs;\r\n            experimentalForceOwningTab = !!settings.experimentalForceOwningTab;\r\n            _validateIsNotUsedTogether('synchronizeTabs', synchronizeTabs, 'experimentalForceOwningTab', experimentalForceOwningTab);\r\n        }\r\n        return synchronizeTabs\r\n            ? this._persistenceProvider.enableMultiTabIndexedDbPersistence(this)\r\n            : this._persistenceProvider.enableIndexedDbPersistence(this, experimentalForceOwningTab);\r\n    }\r\n    clearPersistence() {\r\n        return this._persistenceProvider.clearIndexedDbPersistence(this);\r\n    }\r\n    terminate() {\r\n        if (this._appCompat) {\r\n            this._appCompat._removeServiceInstance('firestore-compat');\r\n            this._appCompat._removeServiceInstance('firestore');\r\n        }\r\n        return this._delegate._delete();\r\n    }\r\n    waitForPendingWrites() {\r\n        return waitForPendingWrites(this._delegate);\r\n    }\r\n    onSnapshotsInSync(arg) {\r\n        return onSnapshotsInSync(this._delegate, arg);\r\n    }\r\n    get app() {\r\n        if (!this._appCompat) {\r\n            throw new FirestoreError('failed-precondition', \"Firestore was not initialized using the Firebase SDK. 'app' is \" +\r\n                'not available');\r\n        }\r\n        return this._appCompat;\r\n    }\r\n    collection(pathString) {\r\n        try {\r\n            return new CollectionReference(this, collection(this._delegate, pathString));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'collection()', 'Firestore.collection()');\r\n        }\r\n    }\r\n    doc(pathString) {\r\n        try {\r\n            return new DocumentReference(this, doc(this._delegate, pathString));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'doc()', 'Firestore.doc()');\r\n        }\r\n    }\r\n    collectionGroup(collectionId) {\r\n        try {\r\n            return new Query(this, collectionGroup(this._delegate, collectionId));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'collectionGroup()', 'Firestore.collectionGroup()');\r\n        }\r\n    }\r\n    runTransaction(updateFunction) {\r\n        return runTransaction(this._delegate, transaction => updateFunction(new Transaction(this, transaction)));\r\n    }\r\n    batch() {\r\n        ensureFirestoreConfigured(this._delegate);\r\n        return new WriteBatch(new WriteBatch$1(this._delegate, mutations => executeWrite(this._delegate, mutations)));\r\n    }\r\n    loadBundle(bundleData) {\r\n        return loadBundle(this._delegate, bundleData);\r\n    }\r\n    namedQuery(name) {\r\n        return namedQuery(this._delegate, name).then(expQuery => {\r\n            if (!expQuery) {\r\n                return null;\r\n            }\r\n            return new Query(this, \r\n            // We can pass `expQuery` here directly since named queries don't have a UserDataConverter.\r\n            // Otherwise, we would have to create a new ExpQuery and pass the old UserDataConverter.\r\n            expQuery);\r\n        });\r\n    }\r\n}\r\nclass UserDataWriter extends AbstractUserDataWriter {\r\n    constructor(firestore) {\r\n        super();\r\n        this.firestore = firestore;\r\n    }\r\n    convertBytes(bytes) {\r\n        return new Blob(new Bytes(bytes));\r\n    }\r\n    convertReference(name) {\r\n        const key = this.convertDocumentKey(name, this.firestore._databaseId);\r\n        return DocumentReference.forKey(key, this.firestore, /* converter= */ null);\r\n    }\r\n}\r\nfunction setLogLevel(level) {\r\n    setLogLevel$1(level);\r\n}\r\n/**\r\n * A reference to a transaction.\r\n */\r\nclass Transaction {\r\n    constructor(_firestore, _delegate) {\r\n        this._firestore = _firestore;\r\n        this._delegate = _delegate;\r\n        this._userDataWriter = new UserDataWriter(_firestore);\r\n    }\r\n    get(documentRef) {\r\n        const ref = castReference(documentRef);\r\n        return this._delegate\r\n            .get(ref)\r\n            .then(result => new DocumentSnapshot(this._firestore, new DocumentSnapshot$1(this._firestore._delegate, this._userDataWriter, result._key, result._document, result.metadata, ref.converter)));\r\n    }\r\n    set(documentRef, data, options) {\r\n        const ref = castReference(documentRef);\r\n        if (options) {\r\n            validateSetOptions('Transaction.set', options);\r\n            this._delegate.set(ref, data, options);\r\n        }\r\n        else {\r\n            this._delegate.set(ref, data);\r\n        }\r\n        return this;\r\n    }\r\n    update(documentRef, dataOrField, value, ...moreFieldsAndValues) {\r\n        const ref = castReference(documentRef);\r\n        if (arguments.length === 2) {\r\n            this._delegate.update(ref, dataOrField);\r\n        }\r\n        else {\r\n            this._delegate.update(ref, dataOrField, value, ...moreFieldsAndValues);\r\n        }\r\n        return this;\r\n    }\r\n    delete(documentRef) {\r\n        const ref = castReference(documentRef);\r\n        this._delegate.delete(ref);\r\n        return this;\r\n    }\r\n}\r\nclass WriteBatch {\r\n    constructor(_delegate) {\r\n        this._delegate = _delegate;\r\n    }\r\n    set(documentRef, data, options) {\r\n        const ref = castReference(documentRef);\r\n        if (options) {\r\n            validateSetOptions('WriteBatch.set', options);\r\n            this._delegate.set(ref, data, options);\r\n        }\r\n        else {\r\n            this._delegate.set(ref, data);\r\n        }\r\n        return this;\r\n    }\r\n    update(documentRef, dataOrField, value, ...moreFieldsAndValues) {\r\n        const ref = castReference(documentRef);\r\n        if (arguments.length === 2) {\r\n            this._delegate.update(ref, dataOrField);\r\n        }\r\n        else {\r\n            this._delegate.update(ref, dataOrField, value, ...moreFieldsAndValues);\r\n        }\r\n        return this;\r\n    }\r\n    delete(documentRef) {\r\n        const ref = castReference(documentRef);\r\n        this._delegate.delete(ref);\r\n        return this;\r\n    }\r\n    commit() {\r\n        return this._delegate.commit();\r\n    }\r\n}\r\n/**\r\n * Wraps a `PublicFirestoreDataConverter` translating the types from the\r\n * experimental SDK into corresponding types from the Classic SDK before passing\r\n * them to the wrapped converter.\r\n */\r\nclass FirestoreDataConverter {\r\n    constructor(_firestore, _userDataWriter, _delegate) {\r\n        this._firestore = _firestore;\r\n        this._userDataWriter = _userDataWriter;\r\n        this._delegate = _delegate;\r\n    }\r\n    fromFirestore(snapshot, options) {\r\n        const expSnapshot = new QueryDocumentSnapshot$1(this._firestore._delegate, this._userDataWriter, snapshot._key, snapshot._document, snapshot.metadata, \r\n        /* converter= */ null);\r\n        return this._delegate.fromFirestore(new QueryDocumentSnapshot(this._firestore, expSnapshot), options !== null && options !== void 0 ? options : {});\r\n    }\r\n    toFirestore(modelObject, options) {\r\n        if (!options) {\r\n            return this._delegate.toFirestore(modelObject);\r\n        }\r\n        else {\r\n            return this._delegate.toFirestore(modelObject, options);\r\n        }\r\n    }\r\n    // Use the same instance of `FirestoreDataConverter` for the given instances\r\n    // of `Firestore` and `PublicFirestoreDataConverter` so that isEqual() will\r\n    // compare equal for two objects created with the same converter instance.\r\n    static getInstance(firestore, converter) {\r\n        const converterMapByFirestore = FirestoreDataConverter.INSTANCES;\r\n        let untypedConverterByConverter = converterMapByFirestore.get(firestore);\r\n        if (!untypedConverterByConverter) {\r\n            untypedConverterByConverter = new WeakMap();\r\n            converterMapByFirestore.set(firestore, untypedConverterByConverter);\r\n        }\r\n        let instance = untypedConverterByConverter.get(converter);\r\n        if (!instance) {\r\n            instance = new FirestoreDataConverter(firestore, new UserDataWriter(firestore), converter);\r\n            untypedConverterByConverter.set(converter, instance);\r\n        }\r\n        return instance;\r\n    }\r\n}\r\nFirestoreDataConverter.INSTANCES = new WeakMap();\r\n/**\r\n * A reference to a particular document in a collection in the database.\r\n */\r\nclass DocumentReference {\r\n    constructor(firestore, _delegate) {\r\n        this.firestore = firestore;\r\n        this._delegate = _delegate;\r\n        this._userDataWriter = new UserDataWriter(firestore);\r\n    }\r\n    static forPath(path, firestore, converter) {\r\n        if (path.length % 2 !== 0) {\r\n            throw new FirestoreError('invalid-argument', 'Invalid document reference. Document ' +\r\n                'references must have an even number of segments, but ' +\r\n                `${path.canonicalString()} has ${path.length}`);\r\n        }\r\n        return new DocumentReference(firestore, new DocumentReference$1(firestore._delegate, converter, new _DocumentKey(path)));\r\n    }\r\n    static forKey(key, firestore, converter) {\r\n        return new DocumentReference(firestore, new DocumentReference$1(firestore._delegate, converter, key));\r\n    }\r\n    get id() {\r\n        return this._delegate.id;\r\n    }\r\n    get parent() {\r\n        return new CollectionReference(this.firestore, this._delegate.parent);\r\n    }\r\n    get path() {\r\n        return this._delegate.path;\r\n    }\r\n    collection(pathString) {\r\n        try {\r\n            return new CollectionReference(this.firestore, collection(this._delegate, pathString));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'collection()', 'DocumentReference.collection()');\r\n        }\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof DocumentReference$1)) {\r\n            return false;\r\n        }\r\n        return refEqual(this._delegate, other);\r\n    }\r\n    set(value, options) {\r\n        options = validateSetOptions('DocumentReference.set', options);\r\n        try {\r\n            if (options) {\r\n                return setDoc(this._delegate, value, options);\r\n            }\r\n            else {\r\n                return setDoc(this._delegate, value);\r\n            }\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'setDoc()', 'DocumentReference.set()');\r\n        }\r\n    }\r\n    update(fieldOrUpdateData, value, ...moreFieldsAndValues) {\r\n        try {\r\n            if (arguments.length === 1) {\r\n                return updateDoc(this._delegate, fieldOrUpdateData);\r\n            }\r\n            else {\r\n                return updateDoc(this._delegate, fieldOrUpdateData, value, ...moreFieldsAndValues);\r\n            }\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'updateDoc()', 'DocumentReference.update()');\r\n        }\r\n    }\r\n    delete() {\r\n        return deleteDoc(this._delegate);\r\n    }\r\n    onSnapshot(...args) {\r\n        const options = extractSnapshotOptions(args);\r\n        const observer = wrapObserver(args, result => new DocumentSnapshot(this.firestore, new DocumentSnapshot$1(this.firestore._delegate, this._userDataWriter, result._key, result._document, result.metadata, this._delegate.converter)));\r\n        return onSnapshot(this._delegate, options, observer);\r\n    }\r\n    get(options) {\r\n        let snap;\r\n        if ((options === null || options === void 0 ? void 0 : options.source) === 'cache') {\r\n            snap = getDocFromCache(this._delegate);\r\n        }\r\n        else if ((options === null || options === void 0 ? void 0 : options.source) === 'server') {\r\n            snap = getDocFromServer(this._delegate);\r\n        }\r\n        else {\r\n            snap = getDoc(this._delegate);\r\n        }\r\n        return snap.then(result => new DocumentSnapshot(this.firestore, new DocumentSnapshot$1(this.firestore._delegate, this._userDataWriter, result._key, result._document, result.metadata, this._delegate.converter)));\r\n    }\r\n    withConverter(converter) {\r\n        return new DocumentReference(this.firestore, converter\r\n            ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter))\r\n            : this._delegate.withConverter(null));\r\n    }\r\n}\r\n/**\r\n * Replaces the function name in an error thrown by the firestore-exp API\r\n * with the function names used in the classic API.\r\n */\r\nfunction replaceFunctionName(e, original, updated) {\r\n    e.message = e.message.replace(original, updated);\r\n    return e;\r\n}\r\n/**\r\n * Iterates the list of arguments from an `onSnapshot` call and returns the\r\n * first argument that may be an `SnapshotListenOptions` object. Returns an\r\n * empty object if none is found.\r\n */\r\nfunction extractSnapshotOptions(args) {\r\n    for (const arg of args) {\r\n        if (typeof arg === 'object' && !isPartialObserver(arg)) {\r\n            return arg;\r\n        }\r\n    }\r\n    return {};\r\n}\r\n/**\r\n * Creates an observer that can be passed to the firestore-exp SDK. The\r\n * observer converts all observed values into the format expected by the classic\r\n * SDK.\r\n *\r\n * @param args - The list of arguments from an `onSnapshot` call.\r\n * @param wrapper - The function that converts the firestore-exp type into the\r\n * type used by this shim.\r\n */\r\nfunction wrapObserver(args, wrapper) {\r\n    var _a, _b;\r\n    let userObserver;\r\n    if (isPartialObserver(args[0])) {\r\n        userObserver = args[0];\r\n    }\r\n    else if (isPartialObserver(args[1])) {\r\n        userObserver = args[1];\r\n    }\r\n    else if (typeof args[0] === 'function') {\r\n        userObserver = {\r\n            next: args[0],\r\n            error: args[1],\r\n            complete: args[2]\r\n        };\r\n    }\r\n    else {\r\n        userObserver = {\r\n            next: args[1],\r\n            error: args[2],\r\n            complete: args[3]\r\n        };\r\n    }\r\n    return {\r\n        next: val => {\r\n            if (userObserver.next) {\r\n                userObserver.next(wrapper(val));\r\n            }\r\n        },\r\n        error: (_a = userObserver.error) === null || _a === void 0 ? void 0 : _a.bind(userObserver),\r\n        complete: (_b = userObserver.complete) === null || _b === void 0 ? void 0 : _b.bind(userObserver)\r\n    };\r\n}\r\nclass DocumentSnapshot {\r\n    constructor(_firestore, _delegate) {\r\n        this._firestore = _firestore;\r\n        this._delegate = _delegate;\r\n    }\r\n    get ref() {\r\n        return new DocumentReference(this._firestore, this._delegate.ref);\r\n    }\r\n    get id() {\r\n        return this._delegate.id;\r\n    }\r\n    get metadata() {\r\n        return this._delegate.metadata;\r\n    }\r\n    get exists() {\r\n        return this._delegate.exists();\r\n    }\r\n    data(options) {\r\n        return this._delegate.data(options);\r\n    }\r\n    get(fieldPath, options\r\n    // We are using `any` here to avoid an explicit cast by our users.\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    ) {\r\n        return this._delegate.get(fieldPath, options);\r\n    }\r\n    isEqual(other) {\r\n        return snapshotEqual(this._delegate, other._delegate);\r\n    }\r\n}\r\nclass QueryDocumentSnapshot extends DocumentSnapshot {\r\n    data(options) {\r\n        const data = this._delegate.data(options);\r\n        if (this._delegate._converter) {\r\n            // Undefined is a possible valid value from converter.\r\n            return data;\r\n        }\r\n        else {\r\n            _debugAssert(data !== undefined, 'Document in a QueryDocumentSnapshot should exist');\r\n            return data;\r\n        }\r\n    }\r\n}\r\nclass Query {\r\n    constructor(firestore, _delegate) {\r\n        this.firestore = firestore;\r\n        this._delegate = _delegate;\r\n        this._userDataWriter = new UserDataWriter(firestore);\r\n    }\r\n    where(fieldPath, opStr, value) {\r\n        try {\r\n            // The \"as string\" cast is a little bit of a hack. `where` accepts the\r\n            // FieldPath Compat type as input, but is not typed as such in order to\r\n            // not expose this via our public typings file.\r\n            return new Query(this.firestore, query(this._delegate, where(fieldPath, opStr, value)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, /(orderBy|where)\\(\\)/, 'Query.$1()');\r\n        }\r\n    }\r\n    orderBy(fieldPath, directionStr) {\r\n        try {\r\n            // The \"as string\" cast is a little bit of a hack. `orderBy` accepts the\r\n            // FieldPath Compat type as input, but is not typed as such in order to\r\n            // not expose this via our public typings file.\r\n            return new Query(this.firestore, query(this._delegate, orderBy(fieldPath, directionStr)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, /(orderBy|where)\\(\\)/, 'Query.$1()');\r\n        }\r\n    }\r\n    limit(n) {\r\n        try {\r\n            return new Query(this.firestore, query(this._delegate, limit(n)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'limit()', 'Query.limit()');\r\n        }\r\n    }\r\n    limitToLast(n) {\r\n        try {\r\n            return new Query(this.firestore, query(this._delegate, limitToLast(n)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'limitToLast()', 'Query.limitToLast()');\r\n        }\r\n    }\r\n    startAt(...args) {\r\n        try {\r\n            return new Query(this.firestore, query(this._delegate, startAt(...args)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'startAt()', 'Query.startAt()');\r\n        }\r\n    }\r\n    startAfter(...args) {\r\n        try {\r\n            return new Query(this.firestore, query(this._delegate, startAfter(...args)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'startAfter()', 'Query.startAfter()');\r\n        }\r\n    }\r\n    endBefore(...args) {\r\n        try {\r\n            return new Query(this.firestore, query(this._delegate, endBefore(...args)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'endBefore()', 'Query.endBefore()');\r\n        }\r\n    }\r\n    endAt(...args) {\r\n        try {\r\n            return new Query(this.firestore, query(this._delegate, endAt(...args)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'endAt()', 'Query.endAt()');\r\n        }\r\n    }\r\n    isEqual(other) {\r\n        return queryEqual(this._delegate, other._delegate);\r\n    }\r\n    get(options) {\r\n        let query;\r\n        if ((options === null || options === void 0 ? void 0 : options.source) === 'cache') {\r\n            query = getDocsFromCache(this._delegate);\r\n        }\r\n        else if ((options === null || options === void 0 ? void 0 : options.source) === 'server') {\r\n            query = getDocsFromServer(this._delegate);\r\n        }\r\n        else {\r\n            query = getDocs(this._delegate);\r\n        }\r\n        return query.then(result => new QuerySnapshot(this.firestore, new QuerySnapshot$1(this.firestore._delegate, this._userDataWriter, this._delegate, result._snapshot)));\r\n    }\r\n    onSnapshot(...args) {\r\n        const options = extractSnapshotOptions(args);\r\n        const observer = wrapObserver(args, snap => new QuerySnapshot(this.firestore, new QuerySnapshot$1(this.firestore._delegate, this._userDataWriter, this._delegate, snap._snapshot)));\r\n        return onSnapshot(this._delegate, options, observer);\r\n    }\r\n    withConverter(converter) {\r\n        return new Query(this.firestore, converter\r\n            ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter))\r\n            : this._delegate.withConverter(null));\r\n    }\r\n}\r\nclass DocumentChange {\r\n    constructor(_firestore, _delegate) {\r\n        this._firestore = _firestore;\r\n        this._delegate = _delegate;\r\n    }\r\n    get type() {\r\n        return this._delegate.type;\r\n    }\r\n    get doc() {\r\n        return new QueryDocumentSnapshot(this._firestore, this._delegate.doc);\r\n    }\r\n    get oldIndex() {\r\n        return this._delegate.oldIndex;\r\n    }\r\n    get newIndex() {\r\n        return this._delegate.newIndex;\r\n    }\r\n}\r\nclass QuerySnapshot {\r\n    constructor(_firestore, _delegate) {\r\n        this._firestore = _firestore;\r\n        this._delegate = _delegate;\r\n    }\r\n    get query() {\r\n        return new Query(this._firestore, this._delegate.query);\r\n    }\r\n    get metadata() {\r\n        return this._delegate.metadata;\r\n    }\r\n    get size() {\r\n        return this._delegate.size;\r\n    }\r\n    get empty() {\r\n        return this._delegate.empty;\r\n    }\r\n    get docs() {\r\n        return this._delegate.docs.map(doc => new QueryDocumentSnapshot(this._firestore, doc));\r\n    }\r\n    docChanges(options) {\r\n        return this._delegate\r\n            .docChanges(options)\r\n            .map(docChange => new DocumentChange(this._firestore, docChange));\r\n    }\r\n    forEach(callback, thisArg) {\r\n        this._delegate.forEach(snapshot => {\r\n            callback.call(thisArg, new QueryDocumentSnapshot(this._firestore, snapshot));\r\n        });\r\n    }\r\n    isEqual(other) {\r\n        return snapshotEqual(this._delegate, other._delegate);\r\n    }\r\n}\r\nclass CollectionReference extends Query {\r\n    constructor(firestore, _delegate) {\r\n        super(firestore, _delegate);\r\n        this.firestore = firestore;\r\n        this._delegate = _delegate;\r\n    }\r\n    get id() {\r\n        return this._delegate.id;\r\n    }\r\n    get path() {\r\n        return this._delegate.path;\r\n    }\r\n    get parent() {\r\n        const docRef = this._delegate.parent;\r\n        return docRef ? new DocumentReference(this.firestore, docRef) : null;\r\n    }\r\n    doc(documentPath) {\r\n        try {\r\n            if (documentPath === undefined) {\r\n                // Call `doc` without `documentPath` if `documentPath` is `undefined`\r\n                // as `doc` validates the number of arguments to prevent users from\r\n                // accidentally passing `undefined`.\r\n                return new DocumentReference(this.firestore, doc(this._delegate));\r\n            }\r\n            else {\r\n                return new DocumentReference(this.firestore, doc(this._delegate, documentPath));\r\n            }\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'doc()', 'CollectionReference.doc()');\r\n        }\r\n    }\r\n    add(data) {\r\n        return addDoc(this._delegate, data).then(docRef => new DocumentReference(this.firestore, docRef));\r\n    }\r\n    isEqual(other) {\r\n        return refEqual(this._delegate, other._delegate);\r\n    }\r\n    withConverter(converter) {\r\n        return new CollectionReference(this.firestore, converter\r\n            ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter))\r\n            : this._delegate.withConverter(null));\r\n    }\r\n}\r\nfunction castReference(documentRef) {\r\n    return _cast(documentRef, DocumentReference$1);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// The objects that are a part of this API are exposed to third-parties as\r\n// compiled javascript so we want to flag our private members with a leading\r\n// underscore to discourage their use.\r\n/**\r\n * A `FieldPath` refers to a field in a document. The path may consist of a\r\n * single field name (referring to a top-level field in the document), or a list\r\n * of field names (referring to a nested field in the document).\r\n */\r\nclass FieldPath {\r\n    /**\r\n     * Creates a FieldPath from the provided field names. If more than one field\r\n     * name is provided, the path will point to a nested field in a document.\r\n     *\r\n     * @param fieldNames - A list of field names.\r\n     */\r\n    constructor(...fieldNames) {\r\n        this._delegate = new FieldPath$1(...fieldNames);\r\n    }\r\n    static documentId() {\r\n        /**\r\n         * Internal Note: The backend doesn't technically support querying by\r\n         * document ID. Instead it queries by the entire document name (full path\r\n         * included), but in the cases we currently support documentId(), the net\r\n         * effect is the same.\r\n         */\r\n        return new FieldPath(_FieldPath.keyField().canonicalString());\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof FieldPath$1)) {\r\n            return false;\r\n        }\r\n        return this._delegate._internalPath.isEqual(other._internalPath);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FieldValue {\r\n    constructor(_delegate) {\r\n        this._delegate = _delegate;\r\n    }\r\n    static serverTimestamp() {\r\n        const delegate = serverTimestamp();\r\n        delegate._methodName = 'FieldValue.serverTimestamp';\r\n        return new FieldValue(delegate);\r\n    }\r\n    static delete() {\r\n        const delegate = deleteField();\r\n        delegate._methodName = 'FieldValue.delete';\r\n        return new FieldValue(delegate);\r\n    }\r\n    static arrayUnion(...elements) {\r\n        const delegate = arrayUnion(...elements);\r\n        delegate._methodName = 'FieldValue.arrayUnion';\r\n        return new FieldValue(delegate);\r\n    }\r\n    static arrayRemove(...elements) {\r\n        const delegate = arrayRemove(...elements);\r\n        delegate._methodName = 'FieldValue.arrayRemove';\r\n        return new FieldValue(delegate);\r\n    }\r\n    static increment(n) {\r\n        const delegate = increment(n);\r\n        delegate._methodName = 'FieldValue.increment';\r\n        return new FieldValue(delegate);\r\n    }\r\n    isEqual(other) {\r\n        return this._delegate.isEqual(other._delegate);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst firestoreNamespace = {\r\n    Firestore,\r\n    GeoPoint,\r\n    Timestamp,\r\n    Blob,\r\n    Transaction,\r\n    WriteBatch,\r\n    DocumentReference,\r\n    DocumentSnapshot,\r\n    Query,\r\n    QueryDocumentSnapshot,\r\n    QuerySnapshot,\r\n    CollectionReference,\r\n    FieldPath,\r\n    FieldValue,\r\n    setLogLevel,\r\n    CACHE_SIZE_UNLIMITED\r\n};\r\n/**\r\n * Configures Firestore as part of the Firebase SDK by calling registerComponent.\r\n *\r\n * @param firebase - The FirebaseNamespace to register Firestore with\r\n * @param firestoreFactory - A factory function that returns a new Firestore\r\n *    instance.\r\n */\r\nfunction configureForFirebase(firebase, firestoreFactory) {\r\n    firebase.INTERNAL.registerComponent(new Component('firestore-compat', container => {\r\n        const app = container.getProvider('app-compat').getImmediate();\r\n        const firestoreExp = container.getProvider('firestore').getImmediate();\r\n        return firestoreFactory(app, firestoreExp);\r\n    }, 'PUBLIC').setServiceProps(Object.assign({}, firestoreNamespace)));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Registers the main Firestore build with the components framework.\r\n * Persistence can be enabled via `firebase.firestore().enablePersistence()`.\r\n */\r\nfunction registerFirestore(instance) {\r\n    configureForFirebase(instance, (app, firestoreExp) => new Firestore(app, firestoreExp, new IndexedDbPersistenceProvider()));\r\n    instance.registerVersion(name, version);\r\n}\r\nregisterFirestore(firebase);\n\nexport { registerFirestore };\n\n", "import { isPlatformServer } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, NgModule } from '@angular/core';\nimport * as i1 from '@angular/fire';\nimport { keepUnstableUntilFirst, VERSION } from '@angular/fire';\nimport * as i3 from '@angular/fire/app-check';\nimport { ɵfirebaseAppFactory, ɵcacheInstance, FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire/compat';\nimport * as i2 from '@angular/fire/compat/auth';\nimport { ɵauthFactory, USE_EMULATOR as USE_EMULATOR$1, SETTINGS as SETTINGS$1, TENANT_ID, LANGUAGE_CODE, USE_DEVICE_LANGUAGE, PERSISTENCE } from '@angular/fire/compat/auth';\nimport { Observable, asyncScheduler, from, of } from 'rxjs';\nimport { startWith, pairwise, map, scan, distinctUntilChanged, filter } from 'rxjs/operators';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\nimport firebase from 'firebase/compat/app';\nfunction _fromRef(ref, scheduler = asyncScheduler) {\n  return new Observable(subscriber => {\n    let unsubscribe;\n    if (scheduler != null) {\n      scheduler.schedule(() => {\n        unsubscribe = ref.onSnapshot({\n          includeMetadataChanges: true\n        }, subscriber);\n      });\n    } else {\n      unsubscribe = ref.onSnapshot({\n        includeMetadataChanges: true\n      }, subscriber);\n    }\n    return () => {\n      if (unsubscribe != null) {\n        unsubscribe();\n      }\n    };\n  });\n}\nfunction fromRef(ref, scheduler) {\n  return _fromRef(ref, scheduler);\n}\nfunction fromDocRef(ref, scheduler) {\n  return fromRef(ref, scheduler).pipe(startWith(undefined), pairwise(), map(snapshots => {\n    const [priorPayload, payload] = snapshots;\n    if (!payload.exists) {\n      return {\n        payload,\n        type: 'removed'\n      };\n    }\n    if (!priorPayload?.exists) {\n      return {\n        payload,\n        type: 'added'\n      };\n    }\n    return {\n      payload,\n      type: 'modified'\n    };\n  }));\n}\nfunction fromCollectionRef(ref, scheduler) {\n  return fromRef(ref, scheduler).pipe(map(payload => ({\n    payload,\n    type: 'query'\n  })));\n}\n\n/**\n * AngularFirestoreDocument service\n *\n * This class creates a reference to a Firestore Document. A reference is provided in\n * in the constructor. The class is generic which gives you type safety for data update\n * methods and data streaming.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const fakeStock = new AngularFirestoreDocument<Stock>(doc('stocks/FAKE'));\n * await fakeStock.set({ name: 'FAKE', price: 0.01 });\n * fakeStock.valueChanges().map(snap => {\n *   if(snap.exists) return snap.data();\n *   return null;\n * }).subscribe(value => console.log(value));\n * // OR! Transform using Observable.from() and the data is unwrapped for you\n * Observable.from(fakeStock).subscribe(value => console.log(value));\n */\nclass AngularFirestoreDocument {\n  ref;\n  afs;\n  /**\n   * The constructor takes in a DocumentReference to provide wrapper methods\n   * for data operations, data streaming, and Symbol.observable.\n   */\n  constructor(ref, afs) {\n    this.ref = ref;\n    this.afs = afs;\n  }\n  /**\n   * Create or overwrite a single document.\n   */\n  set(data, options) {\n    return this.ref.set(data, options);\n  }\n  /**\n   * Update some fields of a document without overwriting the entire document.\n   */\n  update(data) {\n    return this.ref.update(data);\n  }\n  /**\n   * Delete a document.\n   */\n  delete() {\n    return this.ref.delete();\n  }\n  /**\n   * Create a reference to a sub-collection given a path and an optional query\n   * function.\n   */\n  collection(path, queryFn) {\n    const collectionRef = this.ref.collection(path);\n    const {\n      ref,\n      query\n    } = associateQuery(collectionRef, queryFn);\n    return new AngularFirestoreCollection(ref, query, this.afs);\n  }\n  /**\n   * Listen to snapshot updates from the document.\n   */\n  snapshotChanges() {\n    const scheduledFromDocRef$ = fromDocRef(this.ref, this.afs.schedulers.outsideAngular);\n    return scheduledFromDocRef$.pipe(keepUnstableUntilFirst);\n  }\n  valueChanges(options = {}) {\n    return this.snapshotChanges().pipe(map(({\n      payload\n    }) => options.idField ? {\n      ...payload.data(),\n      ...{\n        [options.idField]: payload.id\n      }\n    } : payload.data()));\n  }\n  /**\n   * Retrieve the document once.\n   */\n  get(options) {\n    return from(this.ref.get(options)).pipe(keepUnstableUntilFirst);\n  }\n}\n\n/**\n * Return a stream of document changes on a query. These results are not in sort order but in\n * order of occurence.\n */\nfunction docChanges(query, scheduler) {\n  return fromCollectionRef(query, scheduler).pipe(startWith(undefined), pairwise(), map(actionTuple => {\n    const [priorAction, action] = actionTuple;\n    const docChanges = action.payload.docChanges();\n    const actions = docChanges.map(change => ({\n      type: change.type,\n      payload: change\n    }));\n    // the metadata has changed from the prior emission\n    if (priorAction && JSON.stringify(priorAction.payload.metadata) !== JSON.stringify(action.payload.metadata)) {\n      // go through all the docs in payload and figure out which ones changed\n      action.payload.docs.forEach((currentDoc, currentIndex) => {\n        const docChange = docChanges.find(d => d.doc.ref.isEqual(currentDoc.ref));\n        const priorDoc = priorAction?.payload.docs.find(d => d.ref.isEqual(currentDoc.ref));\n        if (docChange && JSON.stringify(docChange.doc.metadata) === JSON.stringify(currentDoc.metadata) || !docChange && priorDoc && JSON.stringify(priorDoc.metadata) === JSON.stringify(currentDoc.metadata)) {\n          // document doesn't appear to have changed, don't log another action\n        } else {\n          // since the actions are processed in order just push onto the array\n          actions.push({\n            type: 'modified',\n            payload: {\n              oldIndex: currentIndex,\n              newIndex: currentIndex,\n              type: 'modified',\n              doc: currentDoc\n            }\n          });\n        }\n      });\n    }\n    return actions;\n  }));\n}\n/**\n * Return a stream of document changes on a query. These results are in sort order.\n */\nfunction sortedChanges(query, events, scheduler) {\n  return docChanges(query, scheduler).pipe(scan((current, changes) => combineChanges(current, changes.map(it => it.payload), events), []), distinctUntilChanged(),\n  // cut down on unneed change cycles\n  map(changes => changes.map(c => ({\n    type: c.type,\n    payload: c\n  }))));\n}\n/**\n * Combines the total result set from the current set of changes from an incoming set\n * of changes.\n */\nfunction combineChanges(current, changes, events) {\n  changes.forEach(change => {\n    // skip unwanted change types\n    if (events.indexOf(change.type) > -1) {\n      current = combineChange(current, change);\n    }\n  });\n  return current;\n}\n/**\n * Splice arguments on top of a sliced array, to break top-level ===\n * this is useful for change-detection\n */\nfunction sliceAndSplice(original, start, deleteCount, ...args) {\n  const returnArray = original.slice();\n  returnArray.splice(start, deleteCount, ...args);\n  return returnArray;\n}\n/**\n * Creates a new sorted array from a new change.\n * Build our own because we allow filtering of action types ('added', 'removed', 'modified') before scanning\n * and so we have greater control over change detection (by breaking ===)\n */\nfunction combineChange(combined, change) {\n  switch (change.type) {\n    case 'added':\n      if (combined[change.newIndex] && combined[change.newIndex].doc.ref.isEqual(change.doc.ref)) {\n        // Not sure why the duplicates are getting fired\n      } else {\n        return sliceAndSplice(combined, change.newIndex, 0, change);\n      }\n      break;\n    case 'modified':\n      if (combined[change.oldIndex] == null || combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\n        // When an item changes position we first remove it\n        // and then add it's new position\n        if (change.oldIndex !== change.newIndex) {\n          const copiedArray = combined.slice();\n          copiedArray.splice(change.oldIndex, 1);\n          copiedArray.splice(change.newIndex, 0, change);\n          return copiedArray;\n        } else {\n          return sliceAndSplice(combined, change.newIndex, 1, change);\n        }\n      }\n      break;\n    case 'removed':\n      if (combined[change.oldIndex] && combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\n        return sliceAndSplice(combined, change.oldIndex, 1);\n      }\n      break;\n  }\n  return combined;\n}\nfunction validateEventsArray(events) {\n  if (!events || events.length === 0) {\n    events = ['added', 'removed', 'modified'];\n  }\n  return events;\n}\n/**\n * AngularFirestoreCollection service\n *\n * This class creates a reference to a Firestore Collection. A reference and a query are provided in\n * in the constructor. The query can be the unqueried reference if no query is desired.The class\n * is generic which gives you type safety for data update methods and data streaming.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const collectionRef = firebase.firestore.collection('stocks');\n * const query = collectionRef.where('price', '>', '0.01');\n * const fakeStock = new AngularFirestoreCollection<Stock>(collectionRef, query);\n *\n * // NOTE!: the updates are performed on the reference not the query\n * await fakeStock.add({ name: 'FAKE', price: 0.01 });\n *\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\n * fakeStock.valueChanges().subscribe(value => console.log(value));\n */\nclass AngularFirestoreCollection {\n  ref;\n  query;\n  afs;\n  /**\n   * The constructor takes in a CollectionReference and Query to provide wrapper methods\n   * for data operations and data streaming.\n   *\n   * Note: Data operation methods are done on the reference not the query. This means\n   * when you update data it is not updating data to the window of your query unless\n   * the data fits the criteria of the query. See the AssociatedRefence type for details\n   * on this implication.\n   */\n  constructor(ref, query, afs) {\n    this.ref = ref;\n    this.query = query;\n    this.afs = afs;\n  }\n  /**\n   * Listen to the latest change in the stream. This method returns changes\n   * as they occur and they are not sorted by query order. This allows you to construct\n   * your own data structure.\n   */\n  stateChanges(events) {\n    let source = docChanges(this.query, this.afs.schedulers.outsideAngular);\n    if (events && events.length > 0) {\n      source = source.pipe(map(actions => actions.filter(change => events.indexOf(change.type) > -1)));\n    }\n    return source.pipe(\n    // We want to filter out empty arrays, but always emit at first, so the developer knows\n    // that the collection has been resolve; even if it's empty\n    startWith(undefined), pairwise(), filter(([prior, current]) => current.length > 0 || !prior), map(([, current]) => current), keepUnstableUntilFirst);\n  }\n  /**\n   * Create a stream of changes as they occur it time. This method is similar to stateChanges()\n   * but it collects each event in an array over time.\n   */\n  auditTrail(events) {\n    return this.stateChanges(events).pipe(scan((current, action) => [...current, ...action], []));\n  }\n  /**\n   * Create a stream of synchronized changes. This method keeps the local array in sorted\n   * query order.\n   */\n  snapshotChanges(events) {\n    const validatedEvents = validateEventsArray(events);\n    const scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\n    return scheduledSortedChanges$.pipe(keepUnstableUntilFirst);\n  }\n  valueChanges(options = {}) {\n    return fromCollectionRef(this.query, this.afs.schedulers.outsideAngular).pipe(map(actions => actions.payload.docs.map(a => {\n      if (options.idField) {\n        return {\n          ...a.data(),\n          ...{\n            [options.idField]: a.id\n          }\n        };\n      } else {\n        return a.data();\n      }\n    })), keepUnstableUntilFirst);\n  }\n  /**\n   * Retrieve the results of the query once.\n   */\n  get(options) {\n    return from(this.query.get(options)).pipe(keepUnstableUntilFirst);\n  }\n  /**\n   * Add data to a collection reference.\n   *\n   * Note: Data operation methods are done on the reference not the query. This means\n   * when you update data it is not updating data to the window of your query unless\n   * the data fits the criteria of the query.\n   */\n  add(data) {\n    return this.ref.add(data);\n  }\n  /**\n   * Create a reference to a single document in a collection.\n   */\n  doc(path) {\n    // TODO is there a better way to solve this type issue\n    return new AngularFirestoreDocument(this.ref.doc(path), this.afs);\n  }\n}\n\n/**\n * AngularFirestoreCollectionGroup service\n *\n * This class holds a reference to a Firestore Collection Group Query.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const collectionGroup = firebase.firestore.collectionGroup('stocks');\n * const query = collectionRef.where('price', '>', '0.01');\n * const fakeStock = new AngularFirestoreCollectionGroup<Stock>(query, afs);\n *\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\n * fakeStock.valueChanges().subscribe(value => console.log(value));\n */\nclass AngularFirestoreCollectionGroup {\n  query;\n  afs;\n  /**\n   * The constructor takes in a CollectionGroupQuery to provide wrapper methods\n   * for data operations and data streaming.\n   */\n  constructor(query, afs) {\n    this.query = query;\n    this.afs = afs;\n  }\n  /**\n   * Listen to the latest change in the stream. This method returns changes\n   * as they occur and they are not sorted by query order. This allows you to construct\n   * your own data structure.\n   */\n  stateChanges(events) {\n    if (!events || events.length === 0) {\n      return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(keepUnstableUntilFirst);\n    }\n    return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(map(actions => actions.filter(change => events.indexOf(change.type) > -1)), filter(changes => changes.length > 0), keepUnstableUntilFirst);\n  }\n  /**\n   * Create a stream of changes as they occur it time. This method is similar to stateChanges()\n   * but it collects each event in an array over time.\n   */\n  auditTrail(events) {\n    return this.stateChanges(events).pipe(scan((current, action) => [...current, ...action], []));\n  }\n  /**\n   * Create a stream of synchronized changes. This method keeps the local array in sorted\n   * query order.\n   */\n  snapshotChanges(events) {\n    const validatedEvents = validateEventsArray(events);\n    const scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\n    return scheduledSortedChanges$.pipe(keepUnstableUntilFirst);\n  }\n  valueChanges(options = {}) {\n    const fromCollectionRefScheduled$ = fromCollectionRef(this.query, this.afs.schedulers.outsideAngular);\n    return fromCollectionRefScheduled$.pipe(map(actions => actions.payload.docs.map(a => {\n      if (options.idField) {\n        return {\n          [options.idField]: a.id,\n          ...a.data()\n        };\n      } else {\n        return a.data();\n      }\n    })), keepUnstableUntilFirst);\n  }\n  /**\n   * Retrieve the results of the query once.\n   */\n  get(options) {\n    return from(this.query.get(options)).pipe(keepUnstableUntilFirst);\n  }\n}\n\n/**\n * The value of this token determines whether or not the firestore will have persistance enabled\n */\nconst ENABLE_PERSISTENCE = new InjectionToken('angularfire2.enableFirestorePersistence');\nconst PERSISTENCE_SETTINGS = new InjectionToken('angularfire2.firestore.persistenceSettings');\nconst SETTINGS = new InjectionToken('angularfire2.firestore.settings');\nconst USE_EMULATOR = new InjectionToken('angularfire2.firestore.use-emulator');\n/**\n * A utility methods for associating a collection reference with\n * a query.\n *\n * @param collectionRef - A collection reference to query\n * @param queryFn - The callback to create a query\n *\n * Example:\n * const { query, ref } = associateQuery(docRef.collection('items'), ref => {\n *  return ref.where('age', '<', 200);\n * });\n */\nfunction associateQuery(collectionRef, queryFn = ref => ref) {\n  const query = queryFn(collectionRef);\n  const ref = collectionRef;\n  return {\n    query,\n    ref\n  };\n}\n/**\n * AngularFirestore Service\n *\n * This service is the main entry point for this feature module. It provides\n * an API for creating Collection and Reference services. These services can\n * then be used to do data updates and observable streams of the data.\n *\n * Example:\n *\n * import { Component } from '@angular/core';\n * import { AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument } from '@angular/fire/firestore';\n * import { Observable } from 'rxjs/Observable';\n * import { from } from 'rxjs/observable';\n *\n * @Component({\n *   selector: 'app-my-component',\n *   template: `\n *    <h2>Items for {{ (profile | async)?.name }}\n *    <ul>\n *       <li *ngFor=\"let item of items | async\">{{ item.name }}</li>\n *    </ul>\n *    <div class=\"control-input\">\n *       <input type=\"text\" #itemname />\n *       <button (click)=\"addItem(itemname.value)\">Add Item</button>\n *    </div>\n *   `\n * })\n * export class MyComponent implements OnInit {\n *\n *   // services for data operations and data streaming\n *   private readonly itemsRef: AngularFirestoreCollection<Item>;\n *   private readonly profileRef: AngularFirestoreDocument<Profile>;\n *\n *   // observables for template\n *   items: Observable<Item[]>;\n *   profile: Observable<Profile>;\n *\n *   // inject main service\n *   constructor(private readonly afs: AngularFirestore) {}\n *\n *   ngOnInit() {\n *     this.itemsRef = afs.collection('items', ref => ref.where('user', '==', 'davideast').limit(10));\n *     this.items = this.itemsRef.valueChanges().map(snap => snap.docs.map(data => doc.data()));\n *     // this.items = from(this.itemsRef); // you can also do this with no mapping\n *\n *     this.profileRef = afs.doc('users/davideast');\n *     this.profile = this.profileRef.valueChanges();\n *   }\n *\n *   addItem(name: string) {\n *     const user = 'davideast';\n *     this.itemsRef.add({ name, user });\n *   }\n * }\n */\nclass AngularFirestore {\n  schedulers;\n  firestore;\n  persistenceEnabled$;\n  /**\n   * Each Feature of AngularFire has a FirebaseApp injected. This way we\n   * don't rely on the main Firebase App instance and we can create named\n   * apps and use multiple apps.\n   */\n  constructor(options, name, shouldEnablePersistence, settings,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  platformId, zone, schedulers, persistenceSettings, _useEmulator, auth, useAuthEmulator, authSettings,\n  // can't use firebase.auth.AuthSettings here\n  tenantId, languageCode, useDeviceLanguage, persistence, _appCheckInstances) {\n    this.schedulers = schedulers;\n    const app = ɵfirebaseAppFactory(options, zone, name);\n    const useEmulator = _useEmulator;\n    if (auth) {\n      ɵauthFactory(app, zone, useAuthEmulator, tenantId, languageCode, useDeviceLanguage, authSettings, persistence);\n    }\n    [this.firestore, this.persistenceEnabled$] = ɵcacheInstance(`${app.name}.firestore`, 'AngularFirestore', app.name, () => {\n      const firestore = zone.runOutsideAngular(() => app.firestore());\n      if (settings) {\n        firestore.settings(settings);\n      }\n      if (useEmulator) {\n        firestore.useEmulator(...useEmulator);\n      }\n      if (shouldEnablePersistence && !isPlatformServer(platformId)) {\n        // We need to try/catch here because not all enablePersistence() failures are caught\n        // https://github.com/firebase/firebase-js-sdk/issues/608\n        const enablePersistence = () => {\n          try {\n            return from(firestore.enablePersistence(persistenceSettings || undefined).then(() => true, () => false));\n          } catch (e) {\n            if (typeof console !== 'undefined') {\n              console.warn(e);\n            }\n            return of(false);\n          }\n        };\n        return [firestore, zone.runOutsideAngular(enablePersistence)];\n      } else {\n        return [firestore, of(false)];\n      }\n    }, [settings, useEmulator, shouldEnablePersistence]);\n  }\n  collection(pathOrRef, queryFn) {\n    let collectionRef;\n    if (typeof pathOrRef === 'string') {\n      collectionRef = this.firestore.collection(pathOrRef);\n    } else {\n      collectionRef = pathOrRef;\n    }\n    const {\n      ref,\n      query\n    } = associateQuery(collectionRef, queryFn);\n    const refInZone = this.schedulers.ngZone.run(() => ref);\n    return new AngularFirestoreCollection(refInZone, query, this);\n  }\n  /**\n   * Create a reference to a Firestore Collection Group based on a collectionId\n   * and an optional query function to narrow the result\n   * set.\n   */\n  collectionGroup(collectionId, queryGroupFn) {\n    const queryFn = queryGroupFn || (ref => ref);\n    const collectionGroup = this.firestore.collectionGroup(collectionId);\n    return new AngularFirestoreCollectionGroup(queryFn(collectionGroup), this);\n  }\n  doc(pathOrRef) {\n    let ref;\n    if (typeof pathOrRef === 'string') {\n      ref = this.firestore.doc(pathOrRef);\n    } else {\n      ref = pathOrRef;\n    }\n    const refInZone = this.schedulers.ngZone.run(() => ref);\n    return new AngularFirestoreDocument(refInZone, this);\n  }\n  /**\n   * Returns a generated Firestore Document Id.\n   */\n  createId() {\n    return this.firestore.collection('_').doc().id;\n  }\n  static ɵfac = function AngularFirestore_Factory(t) {\n    return new (t || AngularFirestore)(i0.ɵɵinject(FIREBASE_OPTIONS), i0.ɵɵinject(FIREBASE_APP_NAME, 8), i0.ɵɵinject(ENABLE_PERSISTENCE, 8), i0.ɵɵinject(SETTINGS, 8), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.ɵAngularFireSchedulers), i0.ɵɵinject(PERSISTENCE_SETTINGS, 8), i0.ɵɵinject(USE_EMULATOR, 8), i0.ɵɵinject(i2.AngularFireAuth, 8), i0.ɵɵinject(USE_EMULATOR$1, 8), i0.ɵɵinject(SETTINGS$1, 8), i0.ɵɵinject(TENANT_ID, 8), i0.ɵɵinject(LANGUAGE_CODE, 8), i0.ɵɵinject(USE_DEVICE_LANGUAGE, 8), i0.ɵɵinject(PERSISTENCE, 8), i0.ɵɵinject(i3.AppCheckInstances, 8));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: AngularFirestore,\n    factory: AngularFirestore.ɵfac,\n    providedIn: 'any'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AngularFirestore, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'any'\n    }]\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [FIREBASE_OPTIONS]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [FIREBASE_APP_NAME]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ENABLE_PERSISTENCE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [SETTINGS]\n    }]\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: i0.NgZone\n  }, {\n    type: i1.ɵAngularFireSchedulers\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [PERSISTENCE_SETTINGS]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [USE_EMULATOR]\n    }]\n  }, {\n    type: i2.AngularFireAuth,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [USE_EMULATOR$1]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [SETTINGS$1]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [TENANT_ID]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [LANGUAGE_CODE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [USE_DEVICE_LANGUAGE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [PERSISTENCE]\n    }]\n  }, {\n    type: i3.AppCheckInstances,\n    decorators: [{\n      type: Optional\n    }]\n  }], null);\n})();\nclass AngularFirestoreModule {\n  constructor() {\n    firebase.registerVersion('angularfire', VERSION.full, 'fst-compat');\n  }\n  /**\n   * Attempt to enable persistent storage, if possible\n   */\n  static enablePersistence(persistenceSettings) {\n    return {\n      ngModule: AngularFirestoreModule,\n      providers: [{\n        provide: ENABLE_PERSISTENCE,\n        useValue: true\n      }, {\n        provide: PERSISTENCE_SETTINGS,\n        useValue: persistenceSettings\n      }]\n    };\n  }\n  static ɵfac = function AngularFirestoreModule_Factory(t) {\n    return new (t || AngularFirestoreModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: AngularFirestoreModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [AngularFirestore]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AngularFirestoreModule, [{\n    type: NgModule,\n    args: [{\n      providers: [AngularFirestore]\n    }]\n  }], () => [], null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AngularFirestore, AngularFirestoreCollection, AngularFirestoreCollectionGroup, AngularFirestoreDocument, AngularFirestoreModule, ENABLE_PERSISTENCE, PERSISTENCE_SETTINGS, SETTINGS, USE_EMULATOR, associateQuery, combineChange, combineChanges, docChanges, fromCollectionRef, fromDocRef, fromRef, sortedChanges, validateEventsArray };\n"],
  "mappings": "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",
  "names": ["VERSION", "getLimitedUseToken", "getToken", "initializeAppCheck", "onTokenChanged", "setTokenAutoRefreshEnabled", "name", "version", "name", "_", "self", "FirebaseApp", "app", "VERSION", "name", "auth", "VERSION", "name", "version", "base64", "DocumentReference", "WriteBatch", "setLogLevel", "DocumentSnapshot", "QueryDocumentSnapshot", "query", "QuerySnapshot", "doc", "FieldPath", "firebase", "query", "docChanges", "SETTINGS", "USE_EMULATOR", "name", "collectionGroup", "VERSION"]
}
